import AppDataSource from '../../infrastructure/db/database';
import { Request, Response } from 'express';
import { Transaction } from '../../core/entity/transaction.entity'; // Make sure your model uses TypeScript as well

export const transactionController = {
    getAllTransactions: async (req: Request, res: Response): Promise<void> => {
        try {
            const transactions = await Transaction.find();
            res.json(transactions);
        } catch (err: any) {
            res.status(500).json({ message: err.message });
        }
    },

    getTransaction: async (req: Request, res: Response): Promise<void> => {
        try {
            const { id } = req.params;
            const transaction = await Transaction.findOne({ where: { id: Number(id) } });
            if (transaction) {
                res.json(transaction);
            } else {
                res.status(404).json({ message: 'Transaction not found.' });
            }
        } catch (err: any) {
            res.status(500).json({ message: err.message });
        }
    },

    createTransaction: async (req: Request, res: Response): Promise<void> => {
        const { user, amount, type, status, transactionDate } = req.body as Transaction;
        // const newTransaction = new Transaction({
        //     user,
        //     amount,
        //     type,
        //     status,
        //     transactionDate
        // });
        const TransactionRepository = AppDataSource.getRepository(Transaction);
        const newTransaction = TransactionRepository.create({
            user,
            amount,
            type,
            status,
            transactionDate
        });
        try {
            const savedTransaction = await newTransaction.save();
            res.status(201).json(savedTransaction);
        } catch (err: any) {
            res.status(400).json({ message: err.message });
        }
    },

    updateTransaction: async (req: Request, res: Response): Promise<void> => {
        try {
            const { id } = req.params;
            const transaction = await Transaction.findByIdAndUpdate(id, req.body, { new: true });
            if (transaction) {
                res.json(transaction);
            } else {
                res.status(404).json({ message: 'Transaction not found.' });
            }
        } catch (err: any) {
            res.status(500).json({ message: err.message });
        }
    },

    deleteTransaction: async (req: Request, res: Response): Promise<void> => {
        try {
            const { id } = req.params;
            const transaction = await Transaction.findByIdAndDelete(id);
            if (transaction) {
                res.json({ message: 'Transaction deleted successfully.' });
            } else {
                res.status(404).json({ message: 'Transaction not found.' });
            }
        } catch (err: any) {
            res.status(500).json({ message: err.message });
        }
    }
};
