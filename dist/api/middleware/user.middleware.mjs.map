{"version":3,"sources":["../../../src/api/middleware/user.middleware.ts"],"sourcesContent":["import { body, validationResult, ValidationChain } from 'express-validator';\nimport express, { Request, Response, NextFunction } from 'express';\n\nconst emailValidations = (email: string) => {\n  return body('email')\n    .exists()\n    .withMessage('Email is required.')\n    .isEmail()\n    .withMessage('Email is not valid.')\n    .isLength({ max: 50 })\n    .withMessage('Email cannot be more than 50 characters long.');\n};\n\nconst usernameValidations = (username: string) => {\n  return body('username')\n    .exists()\n    .withMessage('Username is required.')\n    .isAlphanumeric()\n    .isLength({ min: 6 })\n    .withMessage('Username must be at least 3 characters long.')\n    .isLength({ max: 24 })\n    .withMessage('Username cannot be more than 50 characters long.');\n};\n\nconst firstNameValidations = (firstName: string) => {\n  return body('firstName')\n    .exists()\n    .withMessage('First name is required.')\n    .isLength({ min: 2 })\n    .withMessage('First name must be at least 2 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('First name cannot be more than 50 characters long.');\n};\n\nconst lastNameValidations = (lastName: string) => {\n  return body('lastName')\n    .exists()\n    .withMessage('Last name is required.')\n    .isLength({ min: 2 })\n    .withMessage('Last name must be at least 2 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Last name cannot be more than 50 characters long.');\n};\n\n// TODO: Add city validations\nconst cityValidations = (city: string) => {\n  return body('city')\n    .exists()\n    .withMessage('City is required.')\n    .isLength({ min: 2 })\n    .withMessage('City must be at least 2 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('City cannot be more than 50 characters long.');\n};\n\n// TODO: Add postal code validations\nconst postalCodeValidations = (postalCode: string) => {\n  return body('postalCode')\n    .exists()\n    .withMessage('Postal code is required.')\n    .isLength({ min: 6 })\n    .withMessage('Postal code must be at least 6 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Postal code cannot be more than 50 characters long.');\n};\n\n//TODO: Add address validations\nconst addressValidations = (address: string) => {\n  return body('address')\n    .exists()\n    .withMessage('Address is required.')\n    .isLength({ min: 6 })\n    .withMessage('Address must be at least 6 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Address cannot be more than 50 characters long.');\n};\n\n// TODO: Add phone validations\nconst phoneValidations = (phone: string) => {\n  return body('phone')\n    .exists()\n    .withMessage('Phone is required.')\n    .isLength({ min: 6 })\n    .withMessage('Phone must be at least 6 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Phone cannot be more than 50 characters long.');\n};\n\n// TODO: Add avatar validations\nconst avatarValidations = (avatar: string) => {\n  return body('avatar').exists().withMessage('Avatar is required.');\n};\n\nexport const passwordValidations = (password: string) => {\n  return body('password')\n    .exists()\n    .withMessage('Password is required.')\n    .isLength({ min: 8 })\n    .withMessage('Password must be at least 8 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Password cannot be more than 50 characters long.')\n    .matches(/\\d/)\n    .withMessage('Password must contain at least one number.')\n    .matches(/[^A-Za-z0-9]/)\n    .withMessage('Password must contain at least one special character.')\n    .matches(/[A-Z]/)\n    .withMessage('Password must contain at least one uppercase letter.')\n    .matches(/[a-z]/)\n    .withMessage('Password must contain at least one lowercase letter.');\n};\n\nexport const validateUserFields = async (req: Request, res: Response, next: NextFunction) => {\n  console.log('validating');\n\n  const validations: ValidationChain[] = [\n    //@ts-expect-error error1\n    emailValidations(),\n    //@ts-expect-error error1\n    usernameValidations(),\n    // passwordValidations(req.body.password),\n    // addressValidations(req.body.address),\n    // cityValidations(req.body.city),\n    // postalCodeValidations(req.body.postalCode)\n  ];\n\n  for (const validation of validations) {\n    const result = await validation.run(req);\n\n    if (!result.isEmpty()) break;\n  }\n\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return next();\n  }\n\n  res.status(500).json({ message: 'Validation failed', errors: errors.array()[0].msg });\n};\n"],"mappings":";AAAA,SAAS,MAAM,wBAAyC;AAGxD,IAAM,mBAAmB,CAAC,UAAkB;AAC1C,SAAO,KAAK,OAAO,EAChB,OAAO,EACP,YAAY,oBAAoB,EAChC,QAAQ,EACR,YAAY,qBAAqB,EACjC,SAAS,EAAE,KAAK,GAAG,CAAC,EACpB,YAAY,+CAA+C;AAChE;AAEA,IAAM,sBAAsB,CAAC,aAAqB;AAChD,SAAO,KAAK,UAAU,EACnB,OAAO,EACP,YAAY,uBAAuB,EACnC,eAAe,EACf,SAAS,EAAE,KAAK,EAAE,CAAC,EACnB,YAAY,8CAA8C,EAC1D,SAAS,EAAE,KAAK,GAAG,CAAC,EACpB,YAAY,kDAAkD;AACnE;AAuEO,IAAM,sBAAsB,CAAC,aAAqB;AACvD,SAAO,KAAK,UAAU,EACnB,OAAO,EACP,YAAY,uBAAuB,EACnC,SAAS,EAAE,KAAK,EAAE,CAAC,EACnB,YAAY,8CAA8C,EAC1D,SAAS,EAAE,KAAK,GAAG,CAAC,EACpB,YAAY,kDAAkD,EAC9D,QAAQ,IAAI,EACZ,YAAY,4CAA4C,EACxD,QAAQ,cAAc,EACtB,YAAY,uDAAuD,EACnE,QAAQ,OAAO,EACf,YAAY,sDAAsD,EAClE,QAAQ,OAAO,EACf,YAAY,sDAAsD;AACvE;AAEO,IAAM,qBAAqB,OAAO,KAAc,KAAe,SAAuB;AAC3F,UAAQ,IAAI,YAAY;AAExB,QAAM,cAAiC;AAAA;AAAA,IAErC,iBAAiB;AAAA;AAAA,IAEjB,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKtB;AAEA,aAAW,cAAc,aAAa;AACpC,UAAM,SAAS,MAAM,WAAW,IAAI,GAAG;AAEvC,QAAI,CAAC,OAAO,QAAQ,EAAG;AAAA,EACzB;AAEA,QAAM,SAAS,iBAAiB,GAAG;AAEnC,MAAI,CAAC,OAAO,QAAQ,GAAG;AACrB,WAAO,KAAK;AAAA,EACd;AAEA,MAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,qBAAqB,QAAQ,OAAO,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC;AACtF;","names":[]}