{"version":3,"sources":["../../../../src/core/controllers/Products/ProductController.ts","../../../../src/infrastructure/services/product.service.ts","../../../../src/infrastructure/dto/ProductDTO.ts","../../../../src/utils/products.enums.ts","../../../../src/infrastructure/db/database.ts","../../../../src/infrastructure/repositories/Products/ProductRepository.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { ProductService } from '../../../infrastructure/services/product.service';\n\nexport class ProductController {\n  static productService: ProductService = new ProductService();\n\n  public addProduct = async (req: Request, res: Response): Promise<void> => {\n    try {\n      // Ensure request is valid\n      if (!req.body) {\n        res.status(400).json({ message: 'Request body is required' });\n        return;\n      }\n      // Ensure all required fields are present\n      const product = await ProductController.productService.createProduct(req.body);\n      if (!product) {\n        res.status(400).json({ message: 'Product already exists' });\n        return;\n      }\n      res.status(201).json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  };\n\n  async fetchProducts(req: Request, res: Response): Promise<void> {\n    try {\n      const products = await ProductController.productService.fetchProducts();\n      res.status(200).json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  public getProductById = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const product = await ProductController.productService.getProductById(req.params.id);\n      if (product) {\n        res.json(product);\n      } else {\n        res.status(404).json({ message: 'Product not found' });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  };\n\n  public updateProduct = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const updatedProduct = await ProductController.productService.updateProduct(req.params.id, req.body);\n      if (updatedProduct) {\n        res.json(updatedProduct);\n      } else {\n        res.status(404).json({ message: 'Product not found' });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  };\n\n  public deleteProduct = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const result = await ProductController.productService.deleteProduct(req.body.id);\n      if (result) {\n        res.status(200).send(result);\n      } else {\n        res.status(404).json({ message: 'Product not found' });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  };\n\n  // Current Products that have the most wishlist + likes + views\n  public getTrendingProducts = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const topProducts = await ProductController.productService.getTrendingProducts();\n      res.json(topProducts);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  public getProductsByStyle = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const products = await ProductController.productService.getProductsByStyle(req.params.style);\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  getProductsByCategory = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const products = await ProductController.productService.getProductsByCategory(req.params.category);\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n\n  public filterProducts = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const products = await ProductController.productService.filterProducts(req.body);\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  \n}\n","import bcrypt from 'bcrypt';\nimport { plainToClass } from 'class-transformer';\nimport { ProductDto as Product } from '../dto/ProductDTO';\nimport { ProductFilters, ProductType } from '../../types/product';\nimport { ProductCategory, ProductTags } from '../../utils/products.enums';\nimport { ProductRepository } from '../repositories/Products/ProductRepository';\n\nexport class ProductService {\n\n  // Get Methods\n  async fetchProducts(): Promise<Product[]> {\n    // If the id is undefined, it will return all orders\n    return await ProductRepository.find();\n  }\n\n  async getTrendingProducts(): Promise<Product[]> {\n    // Current Products that have the most wishlist + likes + views\n    const trendingProducts = await ProductRepository.findTrendingProducts();\n    return trendingProducts;\n  }\n\n  async getProductsByCategory(category: string): Promise<Product[]> {\n    if (category in ProductCategory) {\n      throw new Error('Invalid category');\n    }\n    const categoryKey = category as keyof typeof ProductCategory;\n    const products = await ProductRepository.findBy({ product_category: ProductCategory[categoryKey] });\n    if (!products) {\n      return [];\n    }\n    return products;\n  }\n\n    async getProductsByStyle(tag: string): Promise<Product[]> {\n    if (tag in ProductCategory) {\n      throw new Error('Invalid category');\n    }\n    const tagKey = tag as keyof typeof ProductCategory;\n    const products = await ProductRepository.findByTags(tagKey);\n    if (!products) {\n      return [];\n    }\n    return products;\n    }\n  \n  async filterProducts(filter: ProductFilters): Promise<Product[]> {\n    const products = await ProductRepository.filterProducts(filter);\n    if (!products) {\n      return [];\n    }\n    return products;\n  }\n\n  async getProductById(id: string): Promise<Product | null> {\n    const product = await ProductRepository.findOneBy({ product_id: id });\n    if (!product) {\n      return null\n    }\n    return product;\n  } \n\n  // Post Methods\n  async createProduct(productData: ProductType): Promise<Product | null> {\n    productData.product_id = await this._genProductId(productData.seller.toString(), productData.name);\n    const newProduct = plainToClass(Product, productData);\n    return await ProductRepository.createAndSave(newProduct);\n  }\n\n  async updateProduct(id: string, productData: ProductType): Promise<boolean> {\n    const updatedProduct = plainToClass(Product, productData);\n    const UpdateResult = await ProductRepository.update(id, updatedProduct);\n    if (UpdateResult.affected === 0) {\n      return false\n    }\n    else {\n      return true;\n    }\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const product = await ProductRepository.findOneBy({ product_id: id });\n    if (!product) {\n      return false;\n    }\n    const deletedProduct = await ProductRepository.remove(product);\n    if (!deletedProduct) {\n      throw new Error('Failed to delete product');\n    }\n    return true;\n  }\n\n  // Private Methods\n  async _genProductId(sellerId: string, productName: string): Promise<string> {\n    return await bcrypt.hashSync(sellerId + productName.toLowerCase(), 10);\n  }\n\n  // _genProductUpdateInput(product: ProductType): any {\n  // }\n\n  // _genProductAddInput(product: ProductType): any {\n  //   if (product.imageUrls && product.imageUrls.length === 0) {\n  //     throw new Error('Product must have at least one image');\n  //   }\n\n  //   const colors = {\n  //     PrimaryColor: product.primaryColors,\n  //     SecondaryColor: product.secondaryColors,\n  //   };\n\n  //   const media = product.imageUrls.map((url) => {\n  //     return {\n  //       originalSource: url,\n  //       alt: product.name,\n  //       mediaContentType: 'IMAGE',\n  //     };\n  //   });\n\n  //   const ProductAddSchema = {\n  //     input: {\n  //       title: product.name,\n  //       descriptionHtml: product.description,\n  //       category: 'gid://shopify/TaxonomyCategory/aa-1-1-7-5',\n  //       tags: product.tags,\n  //       vendor: product.seller,\n  //       seo: {\n  //         title: product.name,\n  //         description: product.description,\n  //       },\n  //       productType: product.category,\n  //       metafields: [\n  //         {\n  //           namespace: 'custom',\n  //           key: 'condition',\n  //           value: product.condition,\n  //           type: 'single_line_text_field',\n  //         },\n  //         {\n  //           namespace: 'custom',\n  //           key: 'size',\n  //           value: product.size,\n  //           type: 'single_line_text_field'\n  //         },\n  //         {\n  //           namespace: 'custom',\n  //           key: 'material',\n  //           value: product.material.toString(),\n  //           type: 'single_line_text_field'\n  //         },\n  //         {\n  //           namespace: 'custom',\n  //           key: 'gender',\n  //           value: product.gender,\n  //           type: 'single_line_text_field',\n  //         },\n  //         {\n  //           namespace: 'custom',\n  //           key: 'brand',\n  //           value: product.brand,\n  //           type: 'single_line_text_field',\n  //         },\n  //         {\n  //           namespace: 'custom',\n  //           key: 'color',\n  //           value: JSON.stringify(colors),\n  //           type: 'json',\n  //         },\n  //       ],\n  //     },\n  //     media: media,\n  //   };\n\n  //   return ProductAddSchema;\n  // }\n}\n","import { ProductCategory, ProductColors, ProductTags} from '../../utils/products.enums';\nexport class ProductDto {\n  product_id: string;\n  name: string;\n  description: string;\n  price: number;\n  color: {\n    primaryColor: ProductColors[];\n    secondaryColor: ProductColors[];\n  };\n  listed_size: string;\n  product_category: ProductCategory;\n  brand: string;\n  gender: string;\n  tags: ProductTags[];\n  imageURLS: string[];\n  seller_id: string; // Assuming you want to pass only the seller ID in the DTO\n  material?: string;\n  dimensions?: string;\n  interactions: { id: string }[]; // Assuming the DTO needs only the ID of the interactions\n}\n","export enum ProductCondition {\n  A = 'New',\n  B = 'Used',\n  C = 'Refurbished',\n  D = 'Damaged',\n}\nexport enum ProductGender {\n  Male = 'Male',\n  Female = 'Female',\n  Unisex = 'Unisex',\n}\nexport enum ProductCategory {\n  Shirt = 'Shirt',\n  Pants = 'Pants',\n  Dress = 'Dress',\n  Jacket = 'Jacket',\n  Coat = 'Coat',\n  Suit = 'Suit',\n  Blazer = 'Blazer',\n  Sweater = 'Sweater',\n  Cardigan = 'Cardigan',\n  Top = 'Top',\n  Blouse = 'Blouse',\n  Tshirt = 'Tshirt',\n  Tanktop = 'Tanktop',\n  Jumpsuit = 'Jumpsuit',\n  Skirts = 'Skirts',\n  Other = 'Other',\n}\n\nexport enum ProductSize {\n  XXS = 'XXS',\n  XS = 'XS',\n  S = 'S',\n  M = 'M',\n  L = 'L',\n  XL = 'XL',\n  XXL = 'XXL',\n  XXXL = 'XXXL',\n}\nexport enum ProductMaterial {\n  Cotton = 'Cotton',\n  Polyester = 'Polyester',\n  Silk = 'Silk',\n  Wool = 'Wool',\n  Leather = 'Leather',\n  Denim = 'Denim',\n  Linen = 'Linen',\n  Other = 'Other',\n}\n\nexport enum ProductColors {\n  Black = 'Black',\n  White = 'White',\n  Red = 'Red',\n  Blue = 'Blue',\n  Green = 'Green',\n  Yellow = 'Yellow',\n  Pink = 'Pink',\n  Purple = 'Purple',\n  Orange = 'Orange',\n  Brown = 'Brown',\n  Grey = 'Grey',\n  Beige = 'Beige',\n  Other = 'Other',\n}\nexport enum ProductTags {\n  Vintage00s = \"00's Vintage\",\n  Streetwear = 'Streetwear',\n  Casual = 'Casual',\n  Formal = 'Formal',\n  Sportswear = 'Sportswear',\n  Retro = 'Retro',\n  Modern = 'Modern',\n  Classic = 'Classic',\n  Trendy = 'Trendy',\n  Other = 'Other',\n}\n\nconst measurements = {\n    Shirt: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Sleeve Length', 'Fit'],\n    Pants: ['Waist', 'Hip', 'Rise', 'Inseam', 'Length', 'Leg Opening'],\n    Dress: ['Bust', 'Waist', 'Hip', 'Length', 'Sleeve Length', 'Fit'],\n    Skirt: ['Waist', 'Hip', 'Length', 'Fit'],\n    Jacket: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Coat: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Suit: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Blazer: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Sweater: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Cardigan: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Top: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Blouse: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Tshirt: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Tanktop: ['Chest', 'Shoulder', 'Length', 'Fit'],\n    Jumpsuit: ['Chest', 'Waist', 'Hip', 'Length', 'Fit'],\n}\n\n\n\nexport enum FitTypes {\n  Slim = 'Slim',\n  Regular = 'Regular',\n  Loose = 'Loose',\n  Oversized = 'Oversized',\n}","import { DataSource } from 'typeorm';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst { PGHOST, PGDATABASE, PGPASSWORD, PGUSER, ENDPOINT_ID } = process.env;\nconst AppDataSource = new DataSource({\n  type: 'postgres',\n  host: PGHOST,\n  port: 5432,\n  username: PGUSER,\n  password: PGPASSWORD,\n  database: PGDATABASE,\n  ssl: true,\n  logging: true,\n  entities: [__dirname + '/../../core/entity/*.model.{ts, js, mjs}'],\n  // entities: [__dirname + '/core/entity/*.model.js'],\n  synchronize: true,\n  cache: false,\n});\n\nconsole.log('DATABASE CONNECTION: ', __dirname + 'core/entity/*.model.js');\n\n\nexport default AppDataSource;\n","import AppDataSource from '../../db/database';\nimport { ProductDto as Product } from '../../dto/ProductDTO';\nimport { create } from 'domain';\nimport { UpdateResult } from 'typeorm';\n\nexport const ProductRepository = AppDataSource.getRepository(Product).extend({\n  async findWithColors(productId: number): Promise<string> {\n    const productIdStr = String(productId);\n    // const product = this.findOne({ where: { id: productIdStr }, relations: ['colors'] });\n    return \"product\";\n  },\n  async createAndSave(productData: Partial<Product>): Promise<Product | null> {\n    const product = this.create(productData);\n    // Check uniqueness\n    const existingProduct = await AppDataSource\n      .createQueryBuilder()\n      .select('product')\n      .from(Product, 'product')\n      .where('product.name = :name', { name: product.name })\n      .andWhere('product.seller = :seller', { seller: product.seller_id });\n    if (existingProduct) {\n      return null;\n    }\n    return this.save(product);\n  },\n\n  async update(id: string, productData: Product): Promise<UpdateResult> {\n    const updatedProduct = AppDataSource.createQueryBuilder()\n      .update(Product)\n      .set(productData)\n      .where('id = :id', { id })\n      .execute();\n    return updatedProduct;\n  },\n\n  async findTrendingProducts(): Promise<Product[]> {\n    return await AppDataSource.createQueryBuilder().select('product')\n      .from(Product, 'product').orderBy('product.views', 'DESC').getMany();\n  },\n  \n  async findByTags(tag: string): Promise<Product[]> {\n    return await AppDataSource.createQueryBuilder().select('product')\n      .from(Product, 'product').where('product.tags = :tag', { tag }).getMany();\n  },\n\n  async filterProducts(filter: any): Promise<Product[]> {\n    const queryBuilder = AppDataSource.createQueryBuilder().select('product')\n    if (filter.upperPrice) {\n      queryBuilder.where('product.price < :price', { price: filter.upperPrice });\n      queryBuilder.andWhere('product.price > :price', { price: filter.lowerPrice ? filter.lowerPrice : 0 });\n    }\n    if (filter.category) {\n      queryBuilder.andWhere('product.product_category = :category', { category: filter.category });\n    }\n    if (filter.brand) {\n      queryBuilder.andWhere('product.brand = :brand', { brand: filter.brand });\n    }\n    if (filter.color) {\n      queryBuilder.andWhere('product.color = :color', { color: filter.color });\n    }\n    if (filter.size) {\n      queryBuilder.andWhere('product.listed_size = :size', { size: filter.size });\n    }\n    if (filter.condition) {\n      queryBuilder.andWhere('product.condition = :condition', { condition: filter.condition });\n    }\n    return queryBuilder.getMany();\n    \n  }\n});\n"],"mappings":"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","names":["ProductCategory","dotenv","bcrypt"]}