{"version":3,"sources":["../src/config.ts","../src/infrastructure/db/database.ts"],"sourcesContent":["import dotenv from 'dotenv';\nimport AppDataSource from './infrastructure/db/database';\nimport '@shopify/shopify-api/adapters/node';\nimport { shopifyApi, LATEST_API_VERSION } from '@shopify/shopify-api';\nconst sdk = require('node-appwrite');\n\ndotenv.config();\n\nconst { PORT, JWT_SECERT, EXPIRES_IN } = process.env;\n\nconst DBconnection = async () => {\n  try {\n    console.log('Connecting to database2...');\n    await AppDataSource.initialize()\n      .then(() => {\n        console.log('Data Source has been initialized!');\n      })\n      .catch((err) => {\n        console.error('Error during Data Source initialization:', err);\n      });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst shopifyEnv = {\n  apiKey: '3a0bbb6c01530af6e1edbf1243561147',\n  apiSecretKey: 'a4b2a019f5a630f163def7c77c2e04b3',\n  scopes: ['read_products'],\n  shopName: 'secnd.myshopify.com',\n  hostName: 'ngrok-tunnel-address',\n  apiVersion: LATEST_API_VERSION,\n  isEmbeddedApp: true,\n};\nconst shopify = shopifyApi(shopifyEnv);\n\n\nlet AppwriteClient = new sdk.Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('667a3f9c001646d9ef73') // Your project ID\n    .setKey('4670a6679d62b5a75dc7e508821ee7932f83b810f3a33ed32c32f2104efeefe17c93682382c11650a01ba70af93f5c2d4e5afa78cb03c17571d7d4c82e15025281d8a4ab55981d1de30a19b9bf8ab5a841176e2fa341672709c1a7dc2312d5d496dcbf810088e7a69004fec1045d020e87001e92e9c0e58077398418e5baf15a') // Your secret API key\n    .setSelfSigned() // Use only on dev mode with a self-signed SSL cert\n;\n\nexport default {\n  connect: DBconnection,\n  port: PORT,\n  JWT_SECERT: JWT_SECERT,\n  EXPIRES_IN: EXPIRES_IN,\n  shopify: shopify,\n  AppwriteClient: AppwriteClient,\n  sdk: sdk\n};\n","import { DataSource } from 'typeorm';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst { PGHOST, PGDATABASE, PGPASSWORD, PGUSER, ENDPOINT_ID } = process.env;\nconst AppDataSource = new DataSource({\n  type: 'postgres',\n  host: PGHOST,\n  port: 5432,\n  username: PGUSER,\n  password: PGPASSWORD,\n  database: PGDATABASE,\n  ssl: true,\n  logging: true,\n  entities: ['src/core/entity/*.ts', __dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: true,\n});\n\nexport default AppDataSource;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,iBAAmB;;;ACAnB,qBAA2B;AAC3B,oBAAmB;AACnB,cAAAC,QAAO,OAAO;AAEd,IAAM,EAAE,QAAQ,YAAY,YAAY,QAAQ,YAAY,IAAI,QAAQ;AACxE,IAAM,gBAAgB,IAAI,0BAAW;AAAA,EACnC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,KAAK;AAAA,EACL,SAAS;AAAA,EACT,UAAU,CAAC,wBAAwB,YAAY,yBAAyB;AAAA,EACxE,aAAa;AACf,CAAC;AAED,IAAO,mBAAQ;;;ADhBf,kBAAO;AACP,yBAA+C;AAC/C,IAAM,MAAM,QAAQ,eAAe;AAEnC,eAAAC,QAAO,OAAO;AAEd,IAAM,EAAE,MAAM,YAAY,WAAW,IAAI,QAAQ;AAEjD,IAAM,eAAe,YAAY;AAC/B,MAAI;AACF,YAAQ,IAAI,4BAA4B;AACxC,UAAM,iBAAc,WAAW,EAC5B,KAAK,MAAM;AACV,cAAQ,IAAI,mCAAmC;AAAA,IACjD,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,cAAQ,MAAM,4CAA4C,GAAG;AAAA,IAC/D,CAAC;AAAA,EACL,SAAS,OAAO;AACd,YAAQ,IAAI,KAAK;AAAA,EACnB;AACF;AAEA,IAAM,aAAa;AAAA,EACjB,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,QAAQ,CAAC,eAAe;AAAA,EACxB,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,eAAe;AACjB;AACA,IAAM,cAAU,+BAAW,UAAU;AAGrC,IAAI,iBAAiB,IAAI,IAAI,OAAO,EAC/B,YAAY,8BAA8B,EAC1C,WAAW,sBAAsB,EACjC,OAAO,kQAAkQ,EACzQ,cAAc;AAGnB,IAAO,iBAAQ;AAAA,EACb,SAAS;AAAA,EACT,MAAM;AAAA,EACN;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;","names":["import_dotenv","dotenv","dotenv"]}