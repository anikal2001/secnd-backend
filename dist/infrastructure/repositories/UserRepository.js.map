{"version":3,"sources":["../../../src/infrastructure/repositories/UserRepository.ts","../../../src/infrastructure/db/database.ts","../../../src/infrastructure/dto/UserDTO.ts"],"sourcesContent":["import AppDataSource from '../db/database';\nimport { UserDto as User } from '../dto/UserDTO';\n\nexport const UserRepository = AppDataSource.getRepository(User).extend({\n  findByName(firstName: string, lastName: string) {\n    return this.createQueryBuilder('user')\n      .where('user.firstName = :firstName', { firstName })\n      .andWhere('user.lastName = :lastName', { lastName })\n      .getMany();\n  },\n  findByEmail(email: string) {\n    return this.createQueryBuilder('user').where('user.email = :email', { email }).getOne();\n  },\n  findById(id: number) {\n    return this.createQueryBuilder('user').where('user.id = :id', { id }).getOne();\n  },\n  findByIdandRemove(id: number) {\n    return this.createQueryBuilder('user').delete().from(User).where('user.id = :id', { id }).execute();\n  },\n  isSeller(email: string) {\n    return this.createQueryBuilder('user').where('user.email = :email', { email }).andWhere('user.isSeller = true').getOne();\n  },\n  makeSeller(email: string) {\n    return this.createQueryBuilder('user').update(User).set({ isSeller: true }).where('user.email = :email', { email }).execute();\n  }\n});\n","import { DataSource } from 'typeorm';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst { PGHOST, PGDATABASE, PGPASSWORD, PGUSER, ENDPOINT_ID } = process.env;\nconst AppDataSource = new DataSource({\n  type: 'postgres',\n  host: PGHOST,\n  port: 5432,\n  username: PGUSER,\n  password: PGPASSWORD,\n  database: PGDATABASE,\n  ssl: true,\n  logging: true,\n  entities: [__dirname + '/../../core/entity/*.model.{ts, js, mjs}'],\n  synchronize: true,\n  cache: false,\n});\n\nconsole.log('DATABASE CONNECTION: ', __dirname + 'core/entity/*.model.js');\n\n\nexport default AppDataSource;\n","export class UserDto {\n  user_id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  cart: string[];\n  country?: string;\n  city?: string;\n  postalCode?: string;\n  phone?: string;\n  resetToken?: string;\n  expiryToken?: Date;\n  avatar?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  orders: { id: string }[]; // Assuming the DTO only needs the order IDs\n  transactions: { id: string }[]; // Assuming the DTO only needs the transaction IDs\n  interactions: { id: string }[]; // Assuming the DTO only needs the interaction IDs\n    isSeller: boolean;\n    password: string;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,qBAA2B;AAC3B,oBAAmB;AACnB,cAAAA,QAAO,OAAO;AAEd,IAAM,EAAE,QAAQ,YAAY,YAAY,QAAQ,YAAY,IAAI,QAAQ;AACxE,IAAM,gBAAgB,IAAI,0BAAW;AAAA,EACnC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,KAAK;AAAA,EACL,SAAS;AAAA,EACT,UAAU,CAAC,YAAY,0CAA0C;AAAA,EACjE,aAAa;AAAA,EACb,OAAO;AACT,CAAC;AAED,QAAQ,IAAI,yBAAyB,YAAY,wBAAwB;AAGzE,IAAO,mBAAQ;;;ACtBR,IAAM,UAAN,MAAc;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACE;AAAA,EACA;AACJ;;;AFjBO,IAAM,iBAAiB,iBAAc,cAAc,OAAI,EAAE,OAAO;AAAA,EACrE,WAAW,WAAmB,UAAkB;AAC9C,WAAO,KAAK,mBAAmB,MAAM,EAClC,MAAM,+BAA+B,EAAE,UAAU,CAAC,EAClD,SAAS,6BAA6B,EAAE,SAAS,CAAC,EAClD,QAAQ;AAAA,EACb;AAAA,EACA,YAAY,OAAe;AACzB,WAAO,KAAK,mBAAmB,MAAM,EAAE,MAAM,uBAAuB,EAAE,MAAM,CAAC,EAAE,OAAO;AAAA,EACxF;AAAA,EACA,SAAS,IAAY;AACnB,WAAO,KAAK,mBAAmB,MAAM,EAAE,MAAM,iBAAiB,EAAE,GAAG,CAAC,EAAE,OAAO;AAAA,EAC/E;AAAA,EACA,kBAAkB,IAAY;AAC5B,WAAO,KAAK,mBAAmB,MAAM,EAAE,OAAO,EAAE,KAAK,OAAI,EAAE,MAAM,iBAAiB,EAAE,GAAG,CAAC,EAAE,QAAQ;AAAA,EACpG;AAAA,EACA,SAAS,OAAe;AACtB,WAAO,KAAK,mBAAmB,MAAM,EAAE,MAAM,uBAAuB,EAAE,MAAM,CAAC,EAAE,SAAS,sBAAsB,EAAE,OAAO;AAAA,EACzH;AAAA,EACA,WAAW,OAAe;AACxB,WAAO,KAAK,mBAAmB,MAAM,EAAE,OAAO,OAAI,EAAE,IAAI,EAAE,UAAU,KAAK,CAAC,EAAE,MAAM,uBAAuB,EAAE,MAAM,CAAC,EAAE,QAAQ;AAAA,EAC9H;AACF,CAAC;","names":["dotenv"]}