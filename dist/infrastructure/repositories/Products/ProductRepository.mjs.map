{"version":3,"sources":["../../../../src/infrastructure/db/database.ts","../../../../src/infrastructure/dto/ProductDTO.ts","../../../../src/infrastructure/repositories/Products/ProductRepository.ts"],"sourcesContent":["import { DataSource } from 'typeorm';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst { PGHOST, PGDATABASE, PGPASSWORD, PGUSER, ENDPOINT_ID } = process.env;\nconst AppDataSource = new DataSource({\n  type: 'postgres',\n  host: PGHOST,\n  port: 5432,\n  username: PGUSER,\n  password: PGPASSWORD,\n  database: PGDATABASE,\n  ssl: true,\n  logging: true,\n  entities: [__dirname + '/../../core/entity/*.model.{ts, js, mjs}'],\n  // entities: [__dirname + '/core/entity/*.model.js'],\n  synchronize: true,\n  cache: false,\n});\n\nconsole.log('DATABASE CONNECTION: ', __dirname + 'core/entity/*.model.js');\n\n\nexport default AppDataSource;\n","import { ProductCategory, ProductColors, ProductTags} from '../../utils/products.enums';\nexport class ProductDto {\n  product_id: string;\n  name: string;\n  description: string;\n  price: number;\n  color: {\n    primaryColor: ProductColors[];\n    secondaryColor: ProductColors[];\n  };\n  listed_size: string;\n  product_category: ProductCategory;\n  brand: string;\n  gender: string;\n  tags: ProductTags[];\n  imageURLS: string[];\n  seller_id: string; // Assuming you want to pass only the seller ID in the DTO\n  material?: string;\n  dimensions?: string;\n  interactions: { id: string }[]; // Assuming the DTO needs only the ID of the interactions\n}\n","import AppDataSource from '../../db/database';\nimport { ProductDto as Product } from '../../dto/ProductDTO';\nimport { create } from 'domain';\nimport { UpdateResult } from 'typeorm';\n\nexport const ProductRepository = AppDataSource.getRepository(Product).extend({\n  async findWithColors(productId: number): Promise<string> {\n    const productIdStr = String(productId);\n    // const product = this.findOne({ where: { id: productIdStr }, relations: ['colors'] });\n    return \"product\";\n  },\n  async createAndSave(productData: Partial<Product>): Promise<Product | null> {\n    const product = this.create(productData);\n    // Check uniqueness\n    const existingProduct = await AppDataSource\n      .createQueryBuilder()\n      .select('product')\n      .from(Product, 'product')\n      .where('product.name = :name', { name: product.name })\n      .andWhere('product.seller = :seller', { seller: product.seller_id });\n    if (existingProduct) {\n      return null;\n    }\n    return this.save(product);\n  },\n\n  async update(id: string, productData: Product): Promise<UpdateResult> {\n    const updatedProduct = AppDataSource.createQueryBuilder()\n      .update(Product)\n      .set(productData)\n      .where('id = :id', { id })\n      .execute();\n    return updatedProduct;\n  },\n\n  async findTrendingProducts(): Promise<Product[]> {\n    return await AppDataSource.createQueryBuilder().select('product')\n      .from(Product, 'product').orderBy('product.views', 'DESC').getMany();\n  },\n  \n  async findByTags(tag: string): Promise<Product[]> {\n    return await AppDataSource.createQueryBuilder().select('product')\n      .from(Product, 'product').where('product.tags = :tag', { tag }).getMany();\n  },\n\n  async filterProducts(filter: any): Promise<Product[]> {\n    const queryBuilder = AppDataSource.createQueryBuilder().select('product')\n    if (filter.upperPrice) {\n      queryBuilder.where('product.price < :price', { price: filter.upperPrice });\n      queryBuilder.andWhere('product.price > :price', { price: filter.lowerPrice ? filter.lowerPrice : 0 });\n    }\n    if (filter.category) {\n      queryBuilder.andWhere('product.product_category = :category', { category: filter.category });\n    }\n    if (filter.brand) {\n      queryBuilder.andWhere('product.brand = :brand', { brand: filter.brand });\n    }\n    if (filter.color) {\n      queryBuilder.andWhere('product.color = :color', { color: filter.color });\n    }\n    if (filter.size) {\n      queryBuilder.andWhere('product.listed_size = :size', { size: filter.size });\n    }\n    if (filter.condition) {\n      queryBuilder.andWhere('product.condition = :condition', { condition: filter.condition });\n    }\n    return queryBuilder.getMany();\n    \n  }\n});\n"],"mappings":"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","names":[]}