{"version":3,"sources":["../../../src/infrastructure/repositories/sellerRepository.ts","../../../src/infrastructure/db/database.ts","../../../src/infrastructure/dto/SellerDTO.ts","../../../src/infrastructure/dto/ProductDTO.ts"],"sourcesContent":["import AppDataSource from '../db/database';\nimport { SellerDTO as Seller } from '../dto/SellerDTO';\nimport { plainToInstance } from 'class-transformer';\nimport { ProductDto as Product } from '../dto/ProductDTO';\n\nexport const SellerRepository = AppDataSource.getRepository(Seller).extend({\n    async createAndSave(sellerData: Partial<Seller>): Promise<Seller> {\n        const seller = this.create(sellerData);\n        return this.save(seller);\n    },\n\n    async getSellerProducts(sellerId: number): Promise<any> {\n        const Products = await this.createQueryBuilder('seller')\n            .leftJoinAndSelect('seller.products', 'product')\n            .where('seller.seller_id = :sellerId', { sellerId })\n            .getMany();\n        const ProductsDTO = Products.map((product) => {\n            return plainToInstance(Product, product);\n        });\n        return ProductsDTO;\n        \n    }\n\n    // async findSellerById(sellerId: number): Promise<Seller | undefined> {\n    //     return this.findOne({ where: { sellerId: sellerId } });\n    // }\n});\n","import { DataSource } from 'typeorm';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst { PGHOST, PGDATABASE, PGPASSWORD, PGUSER, ENDPOINT_ID } = process.env;\nconst AppDataSource = new DataSource({\n  type: 'postgres',\n  host: PGHOST,\n  port: 5432,\n  username: PGUSER,\n  password: PGPASSWORD,\n  database: PGDATABASE,\n  ssl: true,\n  logging: true,\n  entities: ['src/core/entity/*.ts', __dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: true,\n});\n\nexport default AppDataSource;\n","import { ProductDto } from \"./ProductDTO\";\n\nexport class SellerDTO {\n  seller_id: number;\n  email: string;\n  store_name: string;\n  store_description: string;\n  store_logo: string;\n  products: ProductDto[];\n}","import { ProductCategory, ProductColors, ProductTags} from '../../utils/products.enums';\nexport class ProductDto {\n  product_id: string;\n  name: string;\n  description: string;\n  price: number;\n  color: {\n    primaryColor: ProductColors[];\n    secondaryColor: ProductColors[];\n  };\n  listed_size: string;\n  product_category: ProductCategory;\n  brand: string;\n  gender: string;\n  tags: ProductTags[];\n  imageURLS: string[];\n  seller_id: string; // Assuming you want to pass only the seller ID in the DTO\n  material?: string;\n  dimensions?: string;\n  interactions: { id: string }[]; // Assuming the DTO needs only the ID of the interactions\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,qBAA2B;AAC3B,oBAAmB;AACnB,cAAAA,QAAO,OAAO;AAEd,IAAM,EAAE,QAAQ,YAAY,YAAY,QAAQ,YAAY,IAAI,QAAQ;AACxE,IAAM,gBAAgB,IAAI,0BAAW;AAAA,EACnC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,KAAK;AAAA,EACL,SAAS;AAAA,EACT,UAAU,CAAC,wBAAwB,YAAY,yBAAyB;AAAA,EACxE,aAAa;AACf,CAAC;AAED,IAAO,mBAAQ;;;AChBR,IAAM,YAAN,MAAgB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;;AFPA,+BAAgC;;;AGDzB,IAAM,aAAN,MAAiB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAIA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AACF;;;AHfO,IAAM,mBAAmB,iBAAc,cAAc,SAAM,EAAE,OAAO;AAAA,EACvE,MAAM,cAAc,YAA8C;AAC9D,UAAM,SAAS,KAAK,OAAO,UAAU;AACrC,WAAO,KAAK,KAAK,MAAM;AAAA,EAC3B;AAAA,EAEA,MAAM,kBAAkB,UAAgC;AACpD,UAAM,WAAW,MAAM,KAAK,mBAAmB,QAAQ,EAClD,kBAAkB,mBAAmB,SAAS,EAC9C,MAAM,gCAAgC,EAAE,SAAS,CAAC,EAClD,QAAQ;AACb,UAAM,cAAc,SAAS,IAAI,CAAC,YAAY;AAC1C,iBAAO,0CAAgB,YAAS,OAAO;AAAA,IAC3C,CAAC;AACD,WAAO;AAAA,EAEX;AAAA;AAAA;AAAA;AAKJ,CAAC;","names":["dotenv"]}