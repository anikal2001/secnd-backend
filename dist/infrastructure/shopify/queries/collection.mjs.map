{"version":3,"sources":["../../../../src/infrastructure/shopify/fragment/image.ts","../../../../src/infrastructure/shopify/fragment/product.ts","../../../../src/infrastructure/shopify/queries/collection.ts"],"sourcesContent":["const imageFragment = /* GraphQL */ `\n  fragment image on Image {\n    url\n    altText\n    width\n    height\n  }\n`;\n\nexport default imageFragment;\n","import imageFragment from './image';\n\nconst productFragment = /* GraphQL */ `\n  fragment product on Product {\n    id\n    handle\n    availableForSale\n    title\n    description\n    descriptionHtml\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    variants(first: 250) {\n      edges {\n        node {\n          id\n          title\n          availableForSale\n          selectedOptions {\n            name\n            value\n          }\n          price {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n    featuredImage {\n      ...image\n    }\n    images(first: 20) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    tags\n    updatedAt\n  }\n  ${imageFragment}\n`;\n\nexport default productFragment;\n","import productFragment from '../fragment/product';\n\nconst collectionFragment = /* GraphQL */ `\n  fragment collection on Collection {\n    handle\n    title\n    description\n    updatedAt\n  }\n`;\n\nexport const getCollectionQuery = /* GraphQL */ `\n  query getCollection($handle: String!) {\n    collection(handle: $handle) {\n      ...collection\n    }\n  }\n  ${collectionFragment}\n`;\n\nexport const getCollectionsQuery = /* GraphQL */ `\n  query getCollections {\n    collections(first: 100, sortKey: TITLE) {\n      edges {\n        node {\n          ...collection\n        }\n      }\n    }\n  }\n  ${collectionFragment}\n`;\n\nexport const getCollectionProductsQuery = /* GraphQL */ `\n  query getCollectionProducts($handle: String!, $sortKey: ProductCollectionSortKeys, $reverse: Boolean) {\n    collection(handle: $handle) {\n      products(sortKey: $sortKey, reverse: $reverse, first: 100) {\n        edges {\n          node {\n            ...product\n          }\n        }\n      }\n    }\n  }\n  ${productFragment}\n`;\n"],"mappings":";AAAA,IAAM;AAAA;AAAA,EAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASpC,IAAO,gBAAQ;;;ACPf,IAAM;AAAA;AAAA,EAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqDlC,aAAa;AAAA;AAAA;AAGjB,IAAO,kBAAQ;;;ACxDf,IAAM;AAAA;AAAA,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASlC,IAAM;AAAA;AAAA,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAM5C,kBAAkB;AAAA;AAAA;AAGf,IAAM;AAAA;AAAA,EAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAU7C,kBAAkB;AAAA;AAAA;AAGf,IAAM;AAAA;AAAA,EAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYpD,eAAe;AAAA;AAAA;","names":[]}