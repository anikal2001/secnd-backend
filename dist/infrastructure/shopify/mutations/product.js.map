{"version":3,"sources":["../../../../src/infrastructure/shopify/mutations/product.ts","../../../../src/infrastructure/shopify/fragment/image.ts","../../../../src/infrastructure/shopify/fragment/product.ts"],"sourcesContent":["import productFragment from '../fragment/product';\n\nexport const addProductMutation = /* GraphQL */ `\nmutation createProduct($input: ProductInput!, $media: [CreateMediaInput!]) {\n  productCreate(input: $input, media: $media) {\n    product {\n      id\n      title\n      descriptionHtml\n      tags\n      vendor\n      variants(first: 1) {\n        edges {\n          node {\n            price\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n      images(first: 10) {\n        edges {\n          node {\n            originalSrc\n          }\n        }\n      }\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n`;\n\nexport const updateProductMutation = /* GraphQL */ `\n  mutation {\n    productUpdate(\n      input: {\n        id: $id\n        title: $title\n        description: $description\n        price: $price\n        primaryColor: $primaryColor\n        secondaryColor: $secondaryColor\n        vendor: $seller\n        size: $size\n        category: $category\n        condition: $condition\n        tags: $tags\n        brand: $brand\n        material: $material\n        gender: $gender\n        imageUrls: $imageUrls\n      }\n    ) {\n      product {\n        id\n      }\n    }\n  }\n  ${productFragment}\n`;\n\nexport const deleteProductMutation = /* GraphQL */ `\nmutation productDelete($input: ProductDeleteInput!) {\n  productDelete(input: $input) {\n    deletedProductId\n    userErrors {\n      field\n      message\n    }\n  }\n}\n`;\n","const imageFragment = /* GraphQL */ `\n  fragment image on Image {\n    url\n    altText\n    width\n    height\n  }\n`;\n\nexport default imageFragment;\n","import imageFragment from './image';\n\nconst productFragment = /* GraphQL */ `\n  fragment product on Product {\n    id\n    handle\n    availableForSale\n    title\n    description\n    descriptionHtml\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    variants(first: 250) {\n      edges {\n        node {\n          id\n          title\n          availableForSale\n          selectedOptions {\n            name\n            value\n          }\n          price {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n    featuredImage {\n      ...image\n    }\n    images(first: 20) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    tags\n    updatedAt\n  }\n  ${imageFragment}\n`;\n\nexport default productFragment;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAM;AAAA;AAAA,EAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASpC,IAAO,gBAAQ;;;ACPf,IAAM;AAAA;AAAA,EAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqDlC,aAAa;AAAA;AAAA;AAGjB,IAAO,kBAAQ;;;AFxDR,IAAM;AAAA;AAAA,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCzC,IAAM;AAAA;AAAA,EAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA0B/C,eAAe;AAAA;AAAA;AAGZ,IAAM;AAAA;AAAA,EAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;","names":[]}