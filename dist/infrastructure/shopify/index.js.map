{"version":3,"sources":["../../../src/infrastructure/shopify/index.ts","../../../src/infrastructure/shopify/constants.ts","../../../src/infrastructure/shopify/type-guards.ts","../../../src/infrastructure/shopify/utils.ts","../../../src/infrastructure/shopify/fragment/image.ts","../../../src/infrastructure/shopify/fragment/product.ts","../../../src/infrastructure/shopify/fragment/cart.ts","../../../src/infrastructure/shopify/mutations/cart.ts","../../../src/infrastructure/shopify/mutations/product.ts","../../../src/infrastructure/shopify/queries/cart.ts","../../../src/infrastructure/shopify/queries/collection.ts","../../../src/infrastructure/shopify/queries/menu.ts","../../../src/infrastructure/shopify/queries/product.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { HIDDEN_PRODUCT_TAG, SHOPIFY_GRAPHQL_API_ENDPOINT, TAGS } from './constants';\nimport { isShopifyError } from './type-guards';\nimport { ensureStartsWith } from './utils';\nimport { addToCartMutation, createCartMutation, editCartItemsMutation, removeFromCartMutation } from './mutations/cart';\nimport { addProductMutation, deleteProductMutation } from './mutations/product';\nimport { getCartQuery } from './queries/cart';\nimport { getCollectionProductsQuery, getCollectionQuery, getCollectionsQuery } from './queries/collection';\nimport { getMenuQuery } from './queries/menu';\nimport { getProductQuery, getProductRecommendationsQuery, getProductsQuery } from './queries/product';\nimport {\n  Cart,\n  Collection,\n  Connection,\n  Image,\n  Menu,\n  Product,\n  ShopifyAddToCartOperation,\n  ShopifyCart,\n  ShopifyCartOperation,\n  ShopifyCollection,\n  ShopifyCollectionOperation,\n  ShopifyCollectionProductsOperation,\n  ShopifyCollectionsOperation,\n  ShopifyCreateCartOperation,\n  ShopifyDeleteProductOperation,\n  ShopifyMenuOperation,\n  ShopifyProduct,\n  ShopifyProductOperation,\n  ShopifyProductRecommendationsOperation,\n  ShopifyProductsOperation,\n  ShopifyRemoveFromCartOperation,\n  ShopifyUpdateCartOperation,\n} from './types';\nimport { ProductColors } from '../../utils/products.enums';\nimport { title } from 'process';\n\nconst domain = process.env.SHOPIFY_STORE_DOMAIN ? ensureStartsWith(process.env.SHOPIFY_STORE_DOMAIN, 'https://') : '';\nconst endpoint = `${domain}${SHOPIFY_GRAPHQL_API_ENDPOINT}`;\nconst adminEndpoint = `https://secndapp.myshopify.com/admin/api/2024-07/graphql.json`;\nconst adminAccessToken = process.env.SHOPIFY_ADMIN_ACCESS_TOKEN!;\nconst key = process.env.SHOPIFY_STOREFRONT_ACCESS_TOKEN!;\n\ntype ExtractVariables<T> = T extends { variables: object } ? T['variables'] : never;\n\nexport async function shopifyFetch<T>({\n  cache = 'force-cache',\n  headers,\n  query,\n  tags,\n  variables,\n}: {\n  cache?: RequestCache;\n  headers?: HeadersInit;\n    query?: string;\n  tags?: string[];\n  variables?: ExtractVariables<T>;\n}): Promise<{ status: number; body: T } | never> {\n  try {\n    const result = await fetch(adminEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Access-Token': adminAccessToken,\n        // 'Shopify-Storefront-Private-Token': key,\n        ...headers,\n      },\n      body: JSON.stringify({\n        ...(query && { query }),\n        ...(variables && { variables }),\n      }),\n      cache,\n      ...(tags && { next: { tags } }),\n    });\n\n    const body = await result.json();\n\n    if (body.errors) {\n      throw body.errors[0];\n    }\n\n    return {\n      status: result.status,\n      body,\n    };\n  } catch (e) {\n    if (isShopifyError(e)) {\n      throw {\n        cause: e.cause?.toString() || 'unknown',\n        status: e.status || 500,\n        message: e.message,\n        query,\n      };\n    }\n\n    throw {\n      error: e,\n      query,\n    };\n  }\n}\n\nconst removeEdgesAndNodes = <T>(array: Connection<T>): T[] => {\n  const final = array.edges.map((edge: { node: unknown }) => edge?.node as T);\n  return final\n};\n\nconst reshapeCart = (cart: ShopifyCart): Cart => {\n  if (!cart.cost?.totalTaxAmount) {\n    cart.cost.totalTaxAmount = {\n      amount: '0.0',\n      currencyCode: 'USD',\n    };\n  }\n\n  return {\n    ...cart,\n    lines: removeEdgesAndNodes(cart.lines),\n  };\n};\n\nconst reshapeCollection = (collection: ShopifyCollection): Collection | undefined => {\n  if (!collection) {\n    return undefined;\n  }\n\n  return {\n    ...collection,\n    path: `/search/${collection.handle}`,\n  };\n};\n\nconst reshapeCollections = (collections: ShopifyCollection[]) => {\n  const reshapedCollections = [];\n\n  for (const collection of collections) {\n    if (collection) {\n      const reshapedCollection = reshapeCollection(collection);\n\n      if (reshapedCollection) {\n        reshapedCollections.push(reshapedCollection);\n      }\n    }\n  }\n\n  return reshapedCollections;\n};\n\nconst reshapeImages = (images: Connection<Image>, productTitle: string) => {\n  const flattened = removeEdgesAndNodes(images);\n\n  return flattened.map((image: Image) => {\n    const filename = image.url.match(/.*\\/(.*)\\..*/)?.[1];\n    return {\n      ...image,\n      altText: image.altText || `${productTitle} - ${filename}`,\n    };\n  });\n};\n\nconst reshapeProduct = (product: ShopifyProduct, filterHiddenProducts: boolean = true) => {\n\n  const { images, variants, ...rest } = product;\n\n  console.log('issue line: ', reshapeImages(images, product.title))\n  return {\n    ...rest,\n    images: reshapeImages(images, product.title),\n  };\n};\n\nconst reshapeProducts = (products: ShopifyProduct[]) => {\n  const reshapedProducts = [];\n\n  for (const product of products) {\n    if (product) {\n      const reshapedProduct = reshapeProduct(product);\n\n      if (reshapedProduct) {\n        reshapedProducts.push(reshapedProduct);\n      }\n    }\n  }\n\n  return reshapedProducts;\n};\n\nexport async function createCart(): Promise<Cart> {\n  const res = await shopifyFetch<ShopifyCreateCartOperation>({\n    query: createCartMutation,\n    cache: 'no-store',\n  });\n\n  return reshapeCart(res.body.data.cartCreate.cart);\n}\n\nexport async function addToCart(cartId: string, lines: { merchandiseId: string; quantity: number }[]): Promise<Cart> {\n  const res = await shopifyFetch<ShopifyAddToCartOperation>({\n    query: addToCartMutation,\n    variables: {\n      cartId,\n      lines,\n    },\n    cache: 'no-store',\n  });\n  return reshapeCart(res.body.data.cartLinesAdd.cart);\n}\n\nexport async function removeFromCart(cartId: string, lineIds: string[]): Promise<Cart> {\n  const res = await shopifyFetch<ShopifyRemoveFromCartOperation>({\n    query: removeFromCartMutation,\n    variables: {\n      cartId,\n      lineIds,\n    },\n    cache: 'no-store',\n  });\n\n  return reshapeCart(res.body.data.cartLinesRemove.cart);\n}\n\nexport async function updateCart(cartId: string, lines: { id: string; merchandiseId: string; quantity: number }[]): Promise<Cart> {\n  const res = await shopifyFetch<ShopifyUpdateCartOperation>({\n    query: editCartItemsMutation,\n    variables: {\n      cartId,\n      lines,\n    },\n    cache: 'no-store',\n  });\n\n  return reshapeCart(res.body.data.cartLinesUpdate.cart);\n}\n\nexport async function getCart(cartId: string | undefined): Promise<Cart | undefined> {\n  if (!cartId) {\n    return undefined;\n  }\n\n  const res = await shopifyFetch<ShopifyCartOperation>({\n    query: getCartQuery,\n    variables: { cartId },\n    tags: [TAGS.cart],\n  });\n\n  // Old carts becomes `null` when you checkout.\n  if (!res.body.data.cart) {\n    return undefined;\n  }\n\n  return reshapeCart(res.body.data.cart);\n}\n\nexport async function getCollection(handle: string): Promise<Collection | undefined> {\n  const res = await shopifyFetch<ShopifyCollectionOperation>({\n    query: getCollectionQuery,\n    tags: [TAGS.collections],\n    variables: {\n      handle,\n    },\n  });\n\n  return reshapeCollection(res.body.data.collection);\n}\n\nexport async function getCollectionProducts({\n  collection,\n  reverse,\n  sortKey,\n}: {\n  collection: string;\n  reverse?: boolean;\n  sortKey?: string;\n}): Promise<Product[]> {\n  const res = await shopifyFetch<ShopifyCollectionProductsOperation>({\n    query: getCollectionProductsQuery,\n    tags: [TAGS.collections, TAGS.products],\n    variables: {\n      handle: collection,\n      reverse,\n      sortKey: sortKey === 'CREATED_AT' ? 'CREATED' : sortKey,\n    },\n  });\n\n  if (!res.body.data.collection) {\n    console.log(`No collection found for \\`${collection}\\``);\n    return [];\n  }\n\n  return reshapeProducts(removeEdgesAndNodes(res.body.data.collection.products));\n}\n\nexport async function getCollections(): Promise<Collection[]> {\n  const res = await shopifyFetch<ShopifyCollectionsOperation>({\n    query: getCollectionsQuery,\n    tags: [TAGS.collections],\n  });\n  const shopifyCollections = removeEdgesAndNodes(res.body?.data?.collections);\n  const collections = [\n    {\n      handle: '',\n      title: 'All',\n      description: 'All products',\n      seo: {\n        title: 'All',\n        description: 'All products',\n      },\n      path: '/search',\n      updatedAt: new Date().toISOString(),\n    },\n    // Filter out the `hidden` collections.\n    // Collections that start with `hidden-*` need to be hidden on the search page.\n    ...reshapeCollections(shopifyCollections).filter((collection) => !collection.handle.startsWith('hidden')),\n  ];\n\n  return collections;\n}\n\nexport async function getMenu(handle: string): Promise<Menu[]> {\n  const res = await shopifyFetch<ShopifyMenuOperation>({\n    query: getMenuQuery,\n    tags: [TAGS.collections],\n    variables: {\n      handle,\n    },\n  });\n\n  return (\n    res.body?.data?.menu?.items.map((item: { title: string; url: string }) => ({\n      title: item.title,\n      path: item.url.replace(domain, '').replace('/collections', '/search').replace('/pages', ''),\n    })) || []\n  );\n}\n\n// export async function getPage(handle: string): Promise<Page> {\n//   const res = await shopifyFetch<ShopifyPageOperation>({\n//     query: getPageQuery,\n//     cache: 'no-store',\n//     variables: { handle },\n//   });\n\n//   return res.body.data.pageByHandle;\n// }\n\n// export async function getPages(): Promise<Page[]> {\n//   const res = await shopifyFetch<ShopifyPagesOperation>({\n//     query: getPagesQuery,\n//     cache: 'no-store',\n//   });\n\n//   return removeEdgesAndNodes(res.body.data.pages);\n// }\n\n\nexport async function deleteProduct(productID: string): Promise<string> {\n  const res = await shopifyFetch<ShopifyDeleteProductOperation>({\n    query: deleteProductMutation,\n    variables: {\n      input: {\n        id: productID, \n      }\n    }\n  })\n  const id = res.body.data.productDelete.deletedProductId\n  return id\n}\n\nexport async function getProduct(handle: string): Promise<Product | undefined> {\n  const res = await shopifyFetch<ShopifyProductOperation>({\n    query: getProductQuery,\n    tags: [TAGS.products],\n    variables: {\n      handle,\n    },\n  });\n\n  return reshapeProduct(res.body.data.product, false);\n}\n\nexport async function getProductRecommendations(productId: string): Promise<Product[]> {\n  const res = await shopifyFetch<ShopifyProductRecommendationsOperation>({\n    query: getProductRecommendationsQuery,\n    tags: [TAGS.products],\n    variables: {\n      productId,\n    },\n  });\n\n  return reshapeProducts(res.body.data.productRecommendations);\n}\n\nexport async function getProducts({ query, reverse, sortKey }: { query?: string; reverse?: boolean; sortKey?: string }): Promise<unknown[]> {\n  const res = await shopifyFetch<ShopifyProductsOperation>({\n    query: getProductsQuery,\n    tags: [TAGS.products],\n  });\n  return removeEdgesAndNodes(res.body.data.products);\n}\n\nexport async function addProduct(variables: any): Promise<string> {\n  //   const res = await shopifyFetch<ShopifyProductsOperation>({\n  //   query: addProductMutation,\n  //   tags: [TAGS.products],\n  //   variables: variables,\n  //   cache: 'no-store',\n  //   });\n  \n  // console.log('addProduct', res.body.data);\n  const res = await fetch(adminEndpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Shopify-Access-Token': adminAccessToken,\n      // 'Shopify-Storefront-Private-Token': key,\n    },\n    body: JSON.stringify({\n      query: addProductMutation,\n      variables: variables,\n    }),\n  });\n  const body = await res.json();\n  return body.data.productCreate.product.id;\n}\n\n// export async function addProduct(\n//   title: string,\n//   description: string,\n//   price: number,\n//   primaryColors: ProductColors[],\n//   secondaryColors: ProductColors[],\n//   size: string,\n//   category: string,\n//   condition: string,\n//   tags: string[],\n//   brand: string,\n//   material: string,\n//   gender: string,\n//   seller: string,\n//   imageUrls: string[],\n// ): Promise<unknown> {\n//   const res = await shopifyFetch<ShopifyProductsOperation>({\n//     query: addProductMutation,\n//     tags: [TAGS.products],\n//     variables: {\n//       title,\n//       description,\n//       price,\n//       primaryColors,\n//       secondaryColors,\n//       size,\n//       category,\n//       condition,\n//       tags,\n//       brand,\n//       material,\n//       gender,\n//       seller,\n//       imageUrls,\n//     },\n//     cache: 'no-store',\n//   });\n\n//   console.log('addProduct', res.body.data);\n//   return res;\n//   // return reshapeProducts(removeEdgesAndNodes(res.body.data.products));\n// }\n","export type SortFilterItem = {\n  title: string;\n  slug: string | null;\n  sortKey: 'RELEVANCE' | 'BEST_SELLING' | 'CREATED_AT' | 'PRICE';\n  reverse: boolean;\n};\n\nexport const defaultSort: SortFilterItem = {\n  title: 'Relevance',\n  slug: null,\n  sortKey: 'RELEVANCE',\n  reverse: false,\n};\n\nexport const sorting: SortFilterItem[] = [\n  defaultSort,\n  { title: 'Trending', slug: 'trending-desc', sortKey: 'BEST_SELLING', reverse: false }, // asc\n  { title: 'Latest arrivals', slug: 'latest-desc', sortKey: 'CREATED_AT', reverse: true },\n  { title: 'Price: Low to high', slug: 'price-asc', sortKey: 'PRICE', reverse: false }, // asc\n  { title: 'Price: High to low', slug: 'price-desc', sortKey: 'PRICE', reverse: true },\n];\n\nexport const TAGS = {\n  collections: 'collections',\n  products: 'products',\n  cart: 'cart',\n};\n\nexport const HIDDEN_PRODUCT_TAG = 'nextjs-frontend-hidden';\nexport const DEFAULT_OPTION = 'Default Title';\nexport const SHOPIFY_GRAPHQL_API_ENDPOINT = '/api/2024-07/graphql.json';\n","export interface ShopifyErrorLike {\n  status: number;\n  message: Error;\n  cause?: Error;\n}\n\nexport const isObject = (object: unknown): object is Record<string, unknown> => {\n  return typeof object === 'object' && object !== null && !Array.isArray(object);\n};\n\nexport const isShopifyError = (error: unknown): error is ShopifyErrorLike => {\n  if (!isObject(error)) return false;\n\n  if (error instanceof Error) return true;\n\n  return findError(error);\n};\n\nfunction findError<T extends object>(error: T): boolean {\n  if (Object.prototype.toString.call(error) === '[object Error]') {\n    return true;\n  }\n\n  const prototype = Object.getPrototypeOf(error) as T | null;\n\n  return prototype === null ? false : findError(prototype);\n}\n","export const ensureStartsWith = (stringToCheck: string, startsWith: string) =>\n  stringToCheck.startsWith(startsWith) ? stringToCheck : `${startsWith}${stringToCheck}`;\n\nexport const validateEnvironmentVariables = () => {\n  const requiredEnvironmentVariables = ['SHOPIFY_STORE_DOMAIN', 'SHOPIFY_STOREFRONT_ACCESS_TOKEN'];\n  const missingEnvironmentVariables = [] as string[];\n\n  requiredEnvironmentVariables.forEach((envVar) => {\n    if (!process.env[envVar]) {\n      missingEnvironmentVariables.push(envVar);\n    }\n  });\n\n  if (missingEnvironmentVariables.length) {\n    throw new Error(\n      `The following environment variables are missing. Your site will not work without them. Read more: https://vercel.com/docs/integrations/shopify#configure-environment-variables\\n\\n${missingEnvironmentVariables.join(\n        '\\n',\n      )}\\n`,\n    );\n  }\n\n  if (process.env.SHOPIFY_STORE_DOMAIN?.includes('[') || process.env.SHOPIFY_STORE_DOMAIN?.includes(']')) {\n    throw new Error(\n      'Your `SHOPIFY_STORE_DOMAIN` environment variable includes brackets (ie. `[` and / or `]`). Your site will not work with them there. Please remove them.',\n    );\n  }\n};\n","const imageFragment = /* GraphQL */ `\n  fragment image on Image {\n    url\n    altText\n    width\n    height\n  }\n`;\n\nexport default imageFragment;\n","import imageFragment from './image';\n\nconst productFragment = /* GraphQL */ `\n  fragment product on Product {\n    id\n    handle\n    availableForSale\n    title\n    description\n    descriptionHtml\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    variants(first: 250) {\n      edges {\n        node {\n          id\n          title\n          availableForSale\n          selectedOptions {\n            name\n            value\n          }\n          price {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n    featuredImage {\n      ...image\n    }\n    images(first: 20) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    tags\n    updatedAt\n  }\n  ${imageFragment}\n`;\n\nexport default productFragment;\n","import productFragment from './product';\n\nconst cartFragment = /* GraphQL */ `\n  fragment cart on Cart {\n    id\n    checkoutUrl\n    cost {\n      subtotalAmount {\n        amount\n        currencyCode\n      }\n      totalAmount {\n        amount\n        currencyCode\n      }\n      totalTaxAmount {\n        amount\n        currencyCode\n      }\n    }\n    lines(first: 100) {\n      edges {\n        node {\n          id\n          quantity\n          cost {\n            totalAmount {\n              amount\n              currencyCode\n            }\n          }\n          merchandise {\n            ... on ProductVariant {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n              product {\n                ...product\n              }\n            }\n          }\n        }\n      }\n    }\n    totalQuantity\n  }\n  ${productFragment}\n`;\n\nexport default cartFragment;\n","import cartFragment from '../fragment/cart';\n\nexport const addToCartMutation = /* GraphQL */ `\n  mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        ...cart\n      }\n    }\n  }\n  ${cartFragment}\n`;\n\nexport const createCartMutation = /* GraphQL */ `\n  mutation createCart($lineItems: [CartLineInput!]) {\n    cartCreate(input: { lines: $lineItems }) {\n      cart {\n        ...cart\n      }\n    }\n  }\n  ${cartFragment}\n`;\n\nexport const editCartItemsMutation = /* GraphQL */ `\n  mutation editCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        ...cart\n      }\n    }\n  }\n  ${cartFragment}\n`;\n\nexport const removeFromCartMutation = /* GraphQL */ `\n  mutation removeFromCart($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        ...cart\n      }\n    }\n  }\n  ${cartFragment}\n`;\n","import productFragment from '../fragment/product';\n\nexport const addProductMutation = /* GraphQL */ `\nmutation createProduct($input: ProductInput!, $media: [CreateMediaInput!]) {\n  productCreate(input: $input, media: $media) {\n    product {\n      id\n      title\n      descriptionHtml\n      tags\n      vendor\n      variants(first: 1) {\n        edges {\n          node {\n            price\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n      images(first: 10) {\n        edges {\n          node {\n            originalSrc\n          }\n        }\n      }\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n`;\n\nexport const updateProductMutation = /* GraphQL */ `\n  mutation {\n    productUpdate(\n      input: {\n        id: $id\n        title: $title\n        description: $description\n        price: $price\n        primaryColor: $primaryColor\n        secondaryColor: $secondaryColor\n        vendor: $seller\n        size: $size\n        category: $category\n        condition: $condition\n        tags: $tags\n        brand: $brand\n        material: $material\n        gender: $gender\n        imageUrls: $imageUrls\n      }\n    ) {\n      product {\n        id\n      }\n    }\n  }\n  ${productFragment}\n`;\n\nexport const deleteProductMutation = /* GraphQL */ `\nmutation productDelete($input: ProductDeleteInput!) {\n  productDelete(input: $input) {\n    deletedProductId\n    userErrors {\n      field\n      message\n    }\n  }\n}\n`;\n","import cartFragment from '../fragment/cart';\n\nexport const getCartQuery = /* GraphQL */ `\n  query getCart($cartId: ID!) {\n    cart(id: $cartId) {\n      ...cart\n    }\n  }\n  ${cartFragment}\n`;\n","import productFragment from '../fragment/product';\n\nconst collectionFragment = /* GraphQL */ `\n  fragment collection on Collection {\n    handle\n    title\n    description\n    updatedAt\n  }\n`;\n\nexport const getCollectionQuery = /* GraphQL */ `\n  query getCollection($handle: String!) {\n    collection(handle: $handle) {\n      ...collection\n    }\n  }\n  ${collectionFragment}\n`;\n\nexport const getCollectionsQuery = /* GraphQL */ `\n  query getCollections {\n    collections(first: 100, sortKey: TITLE) {\n      edges {\n        node {\n          ...collection\n        }\n      }\n    }\n  }\n  ${collectionFragment}\n`;\n\nexport const getCollectionProductsQuery = /* GraphQL */ `\n  query getCollectionProducts($handle: String!, $sortKey: ProductCollectionSortKeys, $reverse: Boolean) {\n    collection(handle: $handle) {\n      products(sortKey: $sortKey, reverse: $reverse, first: 100) {\n        edges {\n          node {\n            ...product\n          }\n        }\n      }\n    }\n  }\n  ${productFragment}\n`;\n","export const getMenuQuery = /* GraphQL */ `\n  query getMenu($handle: String!) {\n    menu(handle: $handle) {\n      items {\n        title\n        url\n      }\n    }\n  }\n`;\n","import productFragment from '../fragment/product';\n\nexport const getProductQuery = /* GraphQL */ `\n  query getProduct($handle: String!) {\n    product(handle: $handle) {\n      ...product\n    }\n  }\n  ${productFragment}\n`;\n\n// export const getProductsQuery = /* GraphQL */ `\n//   query getProducts($sortKey: ProductSortKeys, $reverse: Boolean, $query: String) {\n//     products(sortKey: $sortKey, reverse: $reverse, query: $query, first: 100) {\n//       edges {\n//         node {\n//           ...product\n//         }\n//       }\n//     }\n//   }\n//   ${productFragment}\n// `;\n\nexport const getProductsQuery = /* GraphQL */ `\nquery {\n  products(first: 10, reverse: true) {\n    edges {\n      node {\n        id\n        title\n        handle\n        resourcePublicationOnCurrentPublication {\n          publication {\n            name\n            id\n          }\n          publishDate\n          isPublished\n        }\n      }\n    }\n  }\n}\n`;\n\nexport const getProductRecommendationsQuery = /* GraphQL */ `\n  query getProductRecommendations($productId: ID!) {\n    productRecommendations(productId: $productId) {\n      ...product\n    }\n  }\n  ${productFragment}\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACsBO,IAAM,OAAO;AAAA,EAClB,aAAa;AAAA,EACb,UAAU;AAAA,EACV,MAAM;AACR;AAIO,IAAM,+BAA+B;;;ACxBrC,IAAM,WAAW,CAAC,WAAuD;AAC9E,SAAO,OAAO,WAAW,YAAY,WAAW,QAAQ,CAAC,MAAM,QAAQ,MAAM;AAC/E;AAEO,IAAM,iBAAiB,CAAC,UAA8C;AAC3E,MAAI,CAAC,SAAS,KAAK,EAAG,QAAO;AAE7B,MAAI,iBAAiB,MAAO,QAAO;AAEnC,SAAO,UAAU,KAAK;AACxB;AAEA,SAAS,UAA4B,OAAmB;AACtD,MAAI,OAAO,UAAU,SAAS,KAAK,KAAK,MAAM,kBAAkB;AAC9D,WAAO;AAAA,EACT;AAEA,QAAM,YAAY,OAAO,eAAe,KAAK;AAE7C,SAAO,cAAc,OAAO,QAAQ,UAAU,SAAS;AACzD;;;AC1BO,IAAM,mBAAmB,CAAC,eAAuB,eACtD,cAAc,WAAW,UAAU,IAAI,gBAAgB,GAAG,UAAU,GAAG,aAAa;;;ACDtF,IAAM;AAAA;AAAA,EAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASpC,IAAO,gBAAQ;;;ACPf,IAAM;AAAA;AAAA,EAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqDlC,aAAa;AAAA;AAAA;AAGjB,IAAO,kBAAQ;;;ACxDf,IAAM;AAAA;AAAA,EAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA+C/B,eAAe;AAAA;AAAA;AAGnB,IAAO,eAAQ;;;AClDR,IAAM;AAAA;AAAA,EAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQ3C,YAAY;AAAA;AAAA;AAGT,IAAM;AAAA;AAAA,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQ5C,YAAY;AAAA;AAAA;AAGT,IAAM;AAAA;AAAA,EAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQ/C,YAAY;AAAA;AAAA;AAGT,IAAM;AAAA;AAAA,EAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQhD,YAAY;AAAA;AAAA;;;ACzCT,IAAM;AAAA;AAAA,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCzC,IAAM;AAAA;AAAA,EAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA0B/C,eAAe;AAAA;AAAA;AAGZ,IAAM;AAAA;AAAA,EAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACjE5C,IAAM;AAAA;AAAA,EAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMtC,YAAY;AAAA;AAAA;;;ACNhB,IAAM;AAAA;AAAA,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASlC,IAAM;AAAA;AAAA,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAM5C,kBAAkB;AAAA;AAAA;AAGf,IAAM;AAAA;AAAA,EAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAU7C,kBAAkB;AAAA;AAAA;AAGf,IAAM;AAAA;AAAA,EAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYpD,eAAe;AAAA;AAAA;;;AC7CZ,IAAM;AAAA;AAAA,EAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEnC,IAAM;AAAA;AAAA,EAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMzC,eAAe;AAAA;AAAA;AAgBZ,IAAM;AAAA;AAAA,EAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBvC,IAAM;AAAA;AAAA,EAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMxD,eAAe;AAAA;AAAA;;;AZfnB,IAAM,SAAS,QAAQ,IAAI,uBAAuB,iBAAiB,QAAQ,IAAI,sBAAsB,UAAU,IAAI;AACnH,IAAM,WAAW,GAAG,MAAM,GAAG,4BAA4B;AACzD,IAAM,gBAAgB;AACtB,IAAM,mBAAmB,QAAQ,IAAI;AACrC,IAAM,MAAM,QAAQ,IAAI;AAIxB,eAAsB,aAAgB;AAAA,EACpC,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAMiD;AAC/C,MAAI;AACF,UAAM,SAAS,MAAM,MAAM,eAAe;AAAA,MACxC,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,0BAA0B;AAAA;AAAA,QAE1B,GAAG;AAAA,MACL;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,GAAI,SAAS,EAAE,MAAM;AAAA,QACrB,GAAI,aAAa,EAAE,UAAU;AAAA,MAC/B,CAAC;AAAA,MACD;AAAA,MACA,GAAI,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE;AAAA,IAC/B,CAAC;AAED,UAAM,OAAO,MAAM,OAAO,KAAK;AAE/B,QAAI,KAAK,QAAQ;AACf,YAAM,KAAK,OAAO,CAAC;AAAA,IACrB;AAEA,WAAO;AAAA,MACL,QAAQ,OAAO;AAAA,MACf;AAAA,IACF;AAAA,EACF,SAAS,GAAG;AACV,QAAI,eAAe,CAAC,GAAG;AACrB,YAAM;AAAA,QACJ,OAAO,EAAE,OAAO,SAAS,KAAK;AAAA,QAC9B,QAAQ,EAAE,UAAU;AAAA,QACpB,SAAS,EAAE;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,UAAM;AAAA,MACJ,OAAO;AAAA,MACP;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAM,sBAAsB,CAAI,UAA8B;AAC5D,QAAM,QAAQ,MAAM,MAAM,IAAI,CAAC,SAA4B,MAAM,IAAS;AAC1E,SAAO;AACT;AAEA,IAAM,cAAc,CAAC,SAA4B;AAC/C,MAAI,CAAC,KAAK,MAAM,gBAAgB;AAC9B,SAAK,KAAK,iBAAiB;AAAA,MACzB,QAAQ;AAAA,MACR,cAAc;AAAA,IAChB;AAAA,EACF;AAEA,SAAO;AAAA,IACL,GAAG;AAAA,IACH,OAAO,oBAAoB,KAAK,KAAK;AAAA,EACvC;AACF;AAEA,IAAM,oBAAoB,CAAC,eAA0D;AACnF,MAAI,CAAC,YAAY;AACf,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL,GAAG;AAAA,IACH,MAAM,WAAW,WAAW,MAAM;AAAA,EACpC;AACF;AAEA,IAAM,qBAAqB,CAAC,gBAAqC;AAC/D,QAAM,sBAAsB,CAAC;AAE7B,aAAW,cAAc,aAAa;AACpC,QAAI,YAAY;AACd,YAAM,qBAAqB,kBAAkB,UAAU;AAEvD,UAAI,oBAAoB;AACtB,4BAAoB,KAAK,kBAAkB;AAAA,MAC7C;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEA,IAAM,gBAAgB,CAAC,QAA2B,iBAAyB;AACzE,QAAM,YAAY,oBAAoB,MAAM;AAE5C,SAAO,UAAU,IAAI,CAAC,UAAiB;AACrC,UAAM,WAAW,MAAM,IAAI,MAAM,cAAc,IAAI,CAAC;AACpD,WAAO;AAAA,MACL,GAAG;AAAA,MACH,SAAS,MAAM,WAAW,GAAG,YAAY,MAAM,QAAQ;AAAA,IACzD;AAAA,EACF,CAAC;AACH;AAEA,IAAM,iBAAiB,CAAC,SAAyB,uBAAgC,SAAS;AAExF,QAAM,EAAE,QAAQ,UAAU,GAAG,KAAK,IAAI;AAEtC,UAAQ,IAAI,gBAAgB,cAAc,QAAQ,QAAQ,KAAK,CAAC;AAChE,SAAO;AAAA,IACL,GAAG;AAAA,IACH,QAAQ,cAAc,QAAQ,QAAQ,KAAK;AAAA,EAC7C;AACF;AAEA,IAAM,kBAAkB,CAAC,aAA+B;AACtD,QAAM,mBAAmB,CAAC;AAE1B,aAAW,WAAW,UAAU;AAC9B,QAAI,SAAS;AACX,YAAM,kBAAkB,eAAe,OAAO;AAE9C,UAAI,iBAAiB;AACnB,yBAAiB,KAAK,eAAe;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEA,eAAsB,aAA4B;AAChD,QAAM,MAAM,MAAM,aAAyC;AAAA,IACzD,OAAO;AAAA,IACP,OAAO;AAAA,EACT,CAAC;AAED,SAAO,YAAY,IAAI,KAAK,KAAK,WAAW,IAAI;AAClD;AAEA,eAAsB,UAAU,QAAgB,OAAqE;AACnH,QAAM,MAAM,MAAM,aAAwC;AAAA,IACxD,OAAO;AAAA,IACP,WAAW;AAAA,MACT;AAAA,MACA;AAAA,IACF;AAAA,IACA,OAAO;AAAA,EACT,CAAC;AACD,SAAO,YAAY,IAAI,KAAK,KAAK,aAAa,IAAI;AACpD;AAEA,eAAsB,eAAe,QAAgB,SAAkC;AACrF,QAAM,MAAM,MAAM,aAA6C;AAAA,IAC7D,OAAO;AAAA,IACP,WAAW;AAAA,MACT;AAAA,MACA;AAAA,IACF;AAAA,IACA,OAAO;AAAA,EACT,CAAC;AAED,SAAO,YAAY,IAAI,KAAK,KAAK,gBAAgB,IAAI;AACvD;AAEA,eAAsB,WAAW,QAAgB,OAAiF;AAChI,QAAM,MAAM,MAAM,aAAyC;AAAA,IACzD,OAAO;AAAA,IACP,WAAW;AAAA,MACT;AAAA,MACA;AAAA,IACF;AAAA,IACA,OAAO;AAAA,EACT,CAAC;AAED,SAAO,YAAY,IAAI,KAAK,KAAK,gBAAgB,IAAI;AACvD;AAEA,eAAsB,QAAQ,QAAuD;AACnF,MAAI,CAAC,QAAQ;AACX,WAAO;AAAA,EACT;AAEA,QAAM,MAAM,MAAM,aAAmC;AAAA,IACnD,OAAO;AAAA,IACP,WAAW,EAAE,OAAO;AAAA,IACpB,MAAM,CAAC,KAAK,IAAI;AAAA,EAClB,CAAC;AAGD,MAAI,CAAC,IAAI,KAAK,KAAK,MAAM;AACvB,WAAO;AAAA,EACT;AAEA,SAAO,YAAY,IAAI,KAAK,KAAK,IAAI;AACvC;AAEA,eAAsB,cAAc,QAAiD;AACnF,QAAM,MAAM,MAAM,aAAyC;AAAA,IACzD,OAAO;AAAA,IACP,MAAM,CAAC,KAAK,WAAW;AAAA,IACvB,WAAW;AAAA,MACT;AAAA,IACF;AAAA,EACF,CAAC;AAED,SAAO,kBAAkB,IAAI,KAAK,KAAK,UAAU;AACnD;AAEA,eAAsB,sBAAsB;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AACF,GAIuB;AACrB,QAAM,MAAM,MAAM,aAAiD;AAAA,IACjE,OAAO;AAAA,IACP,MAAM,CAAC,KAAK,aAAa,KAAK,QAAQ;AAAA,IACtC,WAAW;AAAA,MACT,QAAQ;AAAA,MACR;AAAA,MACA,SAAS,YAAY,eAAe,YAAY;AAAA,IAClD;AAAA,EACF,CAAC;AAED,MAAI,CAAC,IAAI,KAAK,KAAK,YAAY;AAC7B,YAAQ,IAAI,6BAA6B,UAAU,IAAI;AACvD,WAAO,CAAC;AAAA,EACV;AAEA,SAAO,gBAAgB,oBAAoB,IAAI,KAAK,KAAK,WAAW,QAAQ,CAAC;AAC/E;AAEA,eAAsB,iBAAwC;AAC5D,QAAM,MAAM,MAAM,aAA0C;AAAA,IAC1D,OAAO;AAAA,IACP,MAAM,CAAC,KAAK,WAAW;AAAA,EACzB,CAAC;AACD,QAAM,qBAAqB,oBAAoB,IAAI,MAAM,MAAM,WAAW;AAC1E,QAAM,cAAc;AAAA,IAClB;AAAA,MACE,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,aAAa;AAAA,MACb,KAAK;AAAA,QACH,OAAO;AAAA,QACP,aAAa;AAAA,MACf;AAAA,MACA,MAAM;AAAA,MACN,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IACpC;AAAA;AAAA;AAAA,IAGA,GAAG,mBAAmB,kBAAkB,EAAE,OAAO,CAAC,eAAe,CAAC,WAAW,OAAO,WAAW,QAAQ,CAAC;AAAA,EAC1G;AAEA,SAAO;AACT;AAEA,eAAsB,QAAQ,QAAiC;AAC7D,QAAM,MAAM,MAAM,aAAmC;AAAA,IACnD,OAAO;AAAA,IACP,MAAM,CAAC,KAAK,WAAW;AAAA,IACvB,WAAW;AAAA,MACT;AAAA,IACF;AAAA,EACF,CAAC;AAED,SACE,IAAI,MAAM,MAAM,MAAM,MAAM,IAAI,CAAC,UAA0C;AAAA,IACzE,OAAO,KAAK;AAAA,IACZ,MAAM,KAAK,IAAI,QAAQ,QAAQ,EAAE,EAAE,QAAQ,gBAAgB,SAAS,EAAE,QAAQ,UAAU,EAAE;AAAA,EAC5F,EAAE,KAAK,CAAC;AAEZ;AAsBA,eAAsB,cAAc,WAAoC;AACtE,QAAM,MAAM,MAAM,aAA4C;AAAA,IAC5D,OAAO;AAAA,IACP,WAAW;AAAA,MACT,OAAO;AAAA,QACL,IAAI;AAAA,MACN;AAAA,IACF;AAAA,EACF,CAAC;AACD,QAAM,KAAK,IAAI,KAAK,KAAK,cAAc;AACvC,SAAO;AACT;AAEA,eAAsB,WAAW,QAA8C;AAC7E,QAAM,MAAM,MAAM,aAAsC;AAAA,IACtD,OAAO;AAAA,IACP,MAAM,CAAC,KAAK,QAAQ;AAAA,IACpB,WAAW;AAAA,MACT;AAAA,IACF;AAAA,EACF,CAAC;AAED,SAAO,eAAe,IAAI,KAAK,KAAK,SAAS,KAAK;AACpD;AAEA,eAAsB,0BAA0B,WAAuC;AACrF,QAAM,MAAM,MAAM,aAAqD;AAAA,IACrE,OAAO;AAAA,IACP,MAAM,CAAC,KAAK,QAAQ;AAAA,IACpB,WAAW;AAAA,MACT;AAAA,IACF;AAAA,EACF,CAAC;AAED,SAAO,gBAAgB,IAAI,KAAK,KAAK,sBAAsB;AAC7D;AAEA,eAAsB,YAAY,EAAE,OAAO,SAAS,QAAQ,GAAgF;AAC1I,QAAM,MAAM,MAAM,aAAuC;AAAA,IACvD,OAAO;AAAA,IACP,MAAM,CAAC,KAAK,QAAQ;AAAA,EACtB,CAAC;AACD,SAAO,oBAAoB,IAAI,KAAK,KAAK,QAAQ;AACnD;AAEA,eAAsB,WAAW,WAAiC;AAShE,QAAM,MAAM,MAAM,MAAM,eAAe;AAAA,IACrC,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,0BAA0B;AAAA;AAAA,IAE5B;AAAA,IACA,MAAM,KAAK,UAAU;AAAA,MACnB,OAAO;AAAA,MACP;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACD,QAAM,OAAO,MAAM,IAAI,KAAK;AAC5B,SAAO,KAAK,KAAK,cAAc,QAAQ;AACzC;","names":[]}