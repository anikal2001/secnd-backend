{"version":3,"sources":["../../../src/infrastructure/services/order.service.ts"],"sourcesContent":["import { OrderType, OrderItemType } from '../../types/order';\n\nexport class OrderService {\n  private orderRepository: { find: () => Order[] | PromiseLike<Order[]>; findOne: (arg0: { where: { id: number; }; }) => any; create: (arg0: { id: number; customer: User; orderItems: OrderItem[]; totalAmount: number; products: Product[]; total: number; status: string; createdAt: Date; updatedAt: Date; }) => any; insert: (arg0: any) => any; } | null;\n  constructor() {\n    this.orderRepository = null;\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return await this.orderRepository.find() as Order[];\n  }\n\n  async getOrderById(id: string): Promise<OrderItemType[]> {\n    const order = await this.orderRepository.findOne({ where: { id: Number(id) } });\n    return order ? order.orderItems : [];\n  }\n\n  async createOrder(orderData: OrderType): Promise<Order | undefined> {\n    const order = this.orderRepository.create({ ...orderData, id: Number(orderData.id) });\n    await this.orderRepository.insert(order);\n    return order as Order;\n  }\n}\n"],"mappings":";AAEO,IAAM,eAAN,MAAmB;AAAA,EAChB;AAAA,EACR,cAAc;AACZ,SAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,MAAM,eAAiC;AACrC,WAAO,MAAM,KAAK,gBAAgB,KAAK;AAAA,EACzC;AAAA,EAEA,MAAM,aAAa,IAAsC;AACvD,UAAM,QAAQ,MAAM,KAAK,gBAAgB,QAAQ,EAAE,OAAO,EAAE,IAAI,OAAO,EAAE,EAAE,EAAE,CAAC;AAC9E,WAAO,QAAQ,MAAM,aAAa,CAAC;AAAA,EACrC;AAAA,EAEA,MAAM,YAAY,WAAkD;AAClE,UAAM,QAAQ,KAAK,gBAAgB,OAAO,EAAE,GAAG,WAAW,IAAI,OAAO,UAAU,EAAE,EAAE,CAAC;AACpF,UAAM,KAAK,gBAAgB,OAAO,KAAK;AACvC,WAAO;AAAA,EACT;AACF;","names":[]}