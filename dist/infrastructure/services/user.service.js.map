{"version":3,"sources":["../../../src/infrastructure/services/user.service.ts","../../../src/infrastructure/db/database.ts","../../../src/infrastructure/dto/UserDTO.ts","../../../src/infrastructure/repositories/UserRepository.ts"],"sourcesContent":["import { UserPreferences } from '../../types/user';\nimport { UserRepository } from '../repositories/UserRepository';\nconst sdk = require('node-appwrite');\n\nexport class UserService {\n  private AppWriteClient: any;\n  private Users: any;\n\n\n  constructor() {\n    const { APPWRITE_ENDPOINT, APPWRITE_PROJECT_ID, APPWRITE_API_KEY } = process.env\n    this.AppWriteClient = new sdk.Client()\n    .setEndpoint(APPWRITE_ENDPOINT) // Your API Endpoint\n    .setProject(APPWRITE_PROJECT_ID) // Your project ID\n    .setKey(APPWRITE_API_KEY) // Your secret API key\n      .setSelfSigned() // Use only on dev mode with a self-signed SSL cert\n    this.Users = new sdk.Users(this.AppWriteClient)\n  }\n  async createUser(\n    email: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n    country: string,\n    city: string,\n    address: string,\n    postalCode: string,\n    phone: string,\n    avatar: string,\n  ) {\n    const existingUser = await UserRepository.findByEmail(email);\n    if (existingUser) {\n      throw new Error('User already exists with the provided email address.');\n    }\n    // const newAddress = AddressRepository.create({\n    //   country: Country.CANADA,\n    //   province: Provinces.ONTARIO,\n    //   city,\n    //   address,\n    //   postalCode,\n    //   phone,\n    // });\n    const newUser = UserRepository.create({\n      email,\n      password,\n      firstName,\n      lastName,\n      postalCode,\n      phone,\n      avatar,\n    });\n\n    return await UserRepository.save(newUser);\n  }\n\n  async getUserPreferences(userId: string){\n    return await this.Users.getPrefs(userId)\n  }\n\n  async sellerLogin(email: string, password: string) {\n    // Check if User is a Seller\n    const isSeller = await UserRepository.isSeller(email);\n    if (!isSeller) {\n      throw new Error('User is not a seller.');\n    }\n    const account = new sdk.Account(this.AppWriteClient)\n    const promise = account.createEmailPasswordSession(email, password)\n    promise.then((response: any) => {\n      console.log(response)\n    }\n    ).catch((error: any) => {\n      console.log(error)\n    })\n  }\n\n  async makeUserSeller(email: string) {\n    return await UserRepository.makeSeller(email);\n  }\n\n  async updateUserPreferences(id: string, preferences: UserPreferences) {\n    return await this.Users.updatePrefs(id, preferences)\n  }\n\n  async updateUserPassword(id: string, newPassword: string) {\n    return await this.Users.updatePassword(id, newPassword)\n  }\n\n  async updateUserEmail(id: string, email: string) {\n    return await this.Users.updateEmail(id, email)\n  }\n\n  async updateUserName(id: string, name: string) {\n    return await this.Users.updateName(id, name)\n  }\n\n  async getUserById(id: string) {\n    return await this.Users.get(id);\n  }\n\n  async getAllUsers() {\n    return await this.Users.list()\n  }\n\n  async removeUser(id: string) {\n    return await this.Users.deleteIdentity(id);\n  }\n}\n","import { DataSource } from 'typeorm';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst { PGHOST, PGDATABASE, PGPASSWORD, PGUSER, ENDPOINT_ID } = process.env;\nconst AppDataSource = new DataSource({\n  type: 'postgres',\n  host: PGHOST,\n  port: 5432,\n  username: PGUSER,\n  password: PGPASSWORD,\n  database: PGDATABASE,\n  ssl: true,\n  logging: true,\n  entities: ['src/core/entity/*.ts', __dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: true,\n});\n\nexport default AppDataSource;\n","export class UserDto {\n  user_id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  cart: string[];\n  country?: string;\n  city?: string;\n  postalCode?: string;\n  phone?: string;\n  resetToken?: string;\n  expiryToken?: Date;\n  avatar?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  orders: { id: string }[]; // Assuming the DTO only needs the order IDs\n  transactions: { id: string }[]; // Assuming the DTO only needs the transaction IDs\n  interactions: { id: string }[]; // Assuming the DTO only needs the interaction IDs\n    isSeller: boolean;\n    password: string;\n}\n","import AppDataSource from '../db/database';\nimport { UserDto as User } from '../dto/UserDTO';\n\nexport const UserRepository = AppDataSource.getRepository(User).extend({\n  findByName(firstName: string, lastName: string) {\n    return this.createQueryBuilder('user')\n      .where('user.firstName = :firstName', { firstName })\n      .andWhere('user.lastName = :lastName', { lastName })\n      .getMany();\n  },\n  findByEmail(email: string) {\n    return this.createQueryBuilder('user').where('user.email = :email', { email }).getOne();\n  },\n  findById(id: number) {\n    return this.createQueryBuilder('user').where('user.id = :id', { id }).getOne();\n  },\n  findByIdandRemove(id: number) {\n    return this.createQueryBuilder('user').delete().from(User).where('user.id = :id', { id }).execute();\n  },\n  isSeller(email: string) {\n    return this.createQueryBuilder('user').where('user.email = :email', { email }).andWhere('user.isSeller = true').getOne();\n  },\n  makeSeller(email: string) {\n    return this.createQueryBuilder('user').update(User).set({ isSeller: true }).where('user.email = :email', { email }).execute();\n  }\n});\n"],"mappings":"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","names":["dotenv"]}