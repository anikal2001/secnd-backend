{"version":3,"sources":["../../src/routes/index.ts","../../src/routes/api/user.apis.ts","../../src/api/middleware/password.middleware.ts","../../src/api/middleware/user.middleware.ts","../../src/api/decorators/middleware.ts","../../src/infrastructure/db/database.ts","../../src/infrastructure/dto/UserDTO.ts","../../src/infrastructure/repositories/UserRepository.ts","../../src/infrastructure/services/user.service.ts","../../src/core/controllers/Users/UserController.ts","../../src/routes/api/seller.apis.ts","../../src/core/controllers/Sellers/SellerController.ts","../../src/infrastructure/dto/SellerDTO.ts","../../src/infrastructure/repositories/sellerRepository.ts","../../src/infrastructure/dto/ProductDTO.ts","../../src/infrastructure/repositories/Products/ProductRepository.ts","../../src/infrastructure/services/seller.service.ts","../../src/routes/api/product.apis.ts","../../src/infrastructure/services/product.service.ts","../../src/utils/products.enums.ts","../../src/core/controllers/Products/ProductController.ts"],"sourcesContent":["import express from 'express';\nimport RateLimit from 'express-rate-limit';\nimport userRouter from './api/user.apis';\nimport sellerRouter from './api/seller.apis';\nimport productRouter from './api/product.apis';\n\nconst router = express.Router();\n\nconst limiter = RateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 30,\n});\n\n// apply rate limiter to all requests\nrouter.use(limiter);\n\nrouter.use('/sellers', sellerRouter);\nrouter.use('/users', userRouter);\nrouter.use('/products', productRouter);\n\nexport default router;\n","import express, { Router } from 'express';\nimport UserController from '../../core/controllers/Users/UserController';\nimport { validateUserFields, passwordValidations } from '../../api/middleware/user.middleware';\nconst router: Router = express.Router();\n\nconst userController = new UserController();\n\nrouter.get('/', userController.getAllUsers);\nrouter.post('/register', passwordValidations, userController.createUser);\nrouter.post('/login', userController.sellerLogin);\nrouter.post('/make-seller', userController.makeUserSeller);\n// router.post('/updatePreferences', userController.updatePreferences)\n// router.post('/login', userController.loginUser)\n// router.put('/:id', userController.updateUser)\n// router.put('/change-password/:id', userController.changePassword)\n\nexport default router;\n","import { Request, Response, NextFunction } from 'express';\nimport bcrypt from 'bcrypt';\n\nexport const hashPassword = async (req: Request, res: Response, next: NextFunction) => {\n  const { password }: { password: string } = req.body;\n  const salt: string = await bcrypt.genSalt(10);\n  const hashedPassword: string = await bcrypt.hash(password, salt);\n  req.body.password = hashedPassword;\n  next();\n};\n\nconst comparePassword = async (hashedPassword: string, userPassword: string) => {\n  return new Promise<null>(async (resolve, reject) => {\n    const passwordResp: Error | boolean = await bcrypt.compare(userPassword, hashedPassword);\n\n    if (typeof passwordResp === 'boolean') {\n      reject('Error while comparing passwords.');\n      return;\n    } else if (passwordResp == false) {\n      reject(new Error('Invalid credentials.'));\n    } else {\n      resolve(null);\n    }\n  });\n};\n","import { body, validationResult, ValidationChain } from 'express-validator';\nimport express, { Request, Response, NextFunction } from 'express';\n\nconst emailValidations = (email: string) => {\n  return body('email')\n    .exists()\n    .withMessage('Email is required.')\n    .isEmail()\n    .withMessage('Email is not valid.')\n    .isLength({ max: 50 })\n    .withMessage('Email cannot be more than 50 characters long.');\n};\n\nconst usernameValidations = (username: string) => {\n  return body('username')\n    .exists()\n    .withMessage('Username is required.')\n    .isAlphanumeric()\n    .isLength({ min: 6 })\n    .withMessage('Username must be at least 3 characters long.')\n    .isLength({ max: 24 })\n    .withMessage('Username cannot be more than 50 characters long.');\n};\n\nconst firstNameValidations = (firstName: string) => {\n  return body('firstName')\n    .exists()\n    .withMessage('First name is required.')\n    .isLength({ min: 2 })\n    .withMessage('First name must be at least 2 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('First name cannot be more than 50 characters long.');\n};\n\nconst lastNameValidations = (lastName: string) => {\n  return body('lastName')\n    .exists()\n    .withMessage('Last name is required.')\n    .isLength({ min: 2 })\n    .withMessage('Last name must be at least 2 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Last name cannot be more than 50 characters long.');\n};\n\n// TODO: Add city validations\nconst cityValidations = (city: string) => {\n  return body('city')\n    .exists()\n    .withMessage('City is required.')\n    .isLength({ min: 2 })\n    .withMessage('City must be at least 2 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('City cannot be more than 50 characters long.');\n};\n\n// TODO: Add postal code validations\nconst postalCodeValidations = (postalCode: string) => {\n  return body('postalCode')\n    .exists()\n    .withMessage('Postal code is required.')\n    .isLength({ min: 6 })\n    .withMessage('Postal code must be at least 6 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Postal code cannot be more than 50 characters long.');\n};\n\n//TODO: Add address validations\nconst addressValidations = (address: string) => {\n  return body('address')\n    .exists()\n    .withMessage('Address is required.')\n    .isLength({ min: 6 })\n    .withMessage('Address must be at least 6 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Address cannot be more than 50 characters long.');\n};\n\n// TODO: Add phone validations\nconst phoneValidations = (phone: string) => {\n  return body('phone')\n    .exists()\n    .withMessage('Phone is required.')\n    .isLength({ min: 6 })\n    .withMessage('Phone must be at least 6 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Phone cannot be more than 50 characters long.');\n};\n\n// TODO: Add avatar validations\nconst avatarValidations = (avatar: string) => {\n  return body('avatar').exists().withMessage('Avatar is required.');\n};\n\nexport const passwordValidations = (password: string) => {\n  return body('password')\n    .exists()\n    .withMessage('Password is required.')\n    .isLength({ min: 8 })\n    .withMessage('Password must be at least 8 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Password cannot be more than 50 characters long.')\n    .matches(/\\d/)\n    .withMessage('Password must contain at least one number.')\n    .matches(/[^A-Za-z0-9]/)\n    .withMessage('Password must contain at least one special character.')\n    .matches(/[A-Z]/)\n    .withMessage('Password must contain at least one uppercase letter.')\n    .matches(/[a-z]/)\n    .withMessage('Password must contain at least one lowercase letter.');\n};\n\nexport const validateUserFields = async (req: Request, res: Response, next: NextFunction) => {\n  console.log('validating');\n\n  const validations: ValidationChain[] = [\n    //@ts-expect-error error1\n    emailValidations(),\n    //@ts-expect-error error1\n    usernameValidations(),\n    // passwordValidations(req.body.password),\n    // addressValidations(req.body.address),\n    // cityValidations(req.body.city),\n    // postalCodeValidations(req.body.postalCode)\n  ];\n\n  for (const validation of validations) {\n    const result = await validation.run(req);\n\n    if (!result.isEmpty()) break;\n  }\n\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return next();\n  }\n\n  res.status(500).json({ message: 'Validation failed', errors: errors.array()[0].msg });\n};\n","import { RequestHandler } from 'express';\n\nexport function Middleware(middleware: RequestHandler): MethodDecorator {\n  console.log('Middleware(): factory evaluated');\n  return function (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\n    const middlewares: RequestHandler[] = Reflect.getMetadata('middlewares', target, propertyKey) || [];\n    middlewares.push(middleware);\n    Reflect.defineMetadata('middlewares', middlewares, target, propertyKey);\n  };\n}\n\nfunction first() {\n  console.log('first(): factory evaluated');\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log('first(): called');\n  };\n}\n\nfunction second() {\n  console.log('second(): factory evaluated');\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log('second(): called');\n  };\n}\n\nexport { first, second };\n","import { DataSource } from 'typeorm';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst { PGHOST, PGDATABASE, PGPASSWORD, PGUSER, ENDPOINT_ID } = process.env;\nconst AppDataSource = new DataSource({\n  type: 'postgres',\n  host: PGHOST,\n  port: 5432,\n  username: PGUSER,\n  password: PGPASSWORD,\n  database: PGDATABASE,\n  ssl: true,\n  logging: true,\n  entities: [__dirname + '/../../core/entity/*.model.{ts, js, mjs}'],\n  // entities: [__dirname + '/core/entity/*.model.js'],\n  synchronize: true,\n  cache: false,\n});\n\nconsole.log('DATABASE CONNECTION: ', __dirname + 'core/entity/*.model.js');\n\n\nexport default AppDataSource;\n","export class UserDto {\n  user_id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  cart: string[];\n  country?: string;\n  city?: string;\n  postalCode?: string;\n  phone?: string;\n  resetToken?: string;\n  expiryToken?: Date;\n  avatar?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  orders: { id: string }[]; // Assuming the DTO only needs the order IDs\n  transactions: { id: string }[]; // Assuming the DTO only needs the transaction IDs\n  interactions: { id: string }[]; // Assuming the DTO only needs the interaction IDs\n    isSeller: boolean;\n    password: string;\n}\n","import AppDataSource from '../db/database';\nimport { UserDto as User } from '../dto/UserDTO';\n\nexport const UserRepository = AppDataSource.getRepository(User).extend({\n  findByName(firstName: string, lastName: string) {\n    return this.createQueryBuilder('user')\n      .where('user.firstName = :firstName', { firstName })\n      .andWhere('user.lastName = :lastName', { lastName })\n      .getMany();\n  },\n  findByEmail(email: string) {\n    return this.createQueryBuilder('user').where('user.email = :email', { email }).getOne();\n  },\n  findById(id: number) {\n    return this.createQueryBuilder('user').where('user.id = :id', { id }).getOne();\n  },\n  findByIdandRemove(id: number) {\n    return this.createQueryBuilder('user').delete().from(User).where('user.id = :id', { id }).execute();\n  },\n  isSeller(email: string) {\n    return this.createQueryBuilder('user').where('user.email = :email', { email }).andWhere('user.isSeller = true').getOne();\n  },\n  makeSeller(email: string) {\n    return this.createQueryBuilder('user').update(User).set({ isSeller: true }).where('user.email = :email', { email }).execute();\n  }\n});\n","import { UserPreferences } from '../../types/user';\nimport { UserRepository } from '../repositories/UserRepository';\nconst sdk = require('node-appwrite');\n\nexport class UserService {\n  private AppWriteClient: any;\n  private Users: any;\n\n\n  constructor() {\n    const { APPWRITE_ENDPOINT, APPWRITE_PROJECT_ID, APPWRITE_API_KEY } = process.env\n    this.AppWriteClient = new sdk.Client()\n    .setEndpoint(APPWRITE_ENDPOINT) // Your API Endpoint\n    .setProject(APPWRITE_PROJECT_ID) // Your project ID\n    .setKey(APPWRITE_API_KEY) // Your secret API key\n      .setSelfSigned() // Use only on dev mode with a self-signed SSL cert\n    this.Users = new sdk.Users(this.AppWriteClient)\n  }\n  async createUser(\n    email: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n    country: string,\n    city: string,\n    address: string,\n    postalCode: string,\n    phone: string,\n    avatar: string,\n  ) {\n    const existingUser = await UserRepository.findByEmail(email);\n    if (existingUser) {\n      throw new Error('User already exists with the provided email address.');\n    }\n    // const newAddress = AddressRepository.create({\n    //   country: Country.CANADA,\n    //   province: Provinces.ONTARIO,\n    //   city,\n    //   address,\n    //   postalCode,\n    //   phone,\n    // });\n    const newUser = UserRepository.create({\n      email,\n      password,\n      firstName,\n      lastName,\n      postalCode,\n      phone,\n      avatar,\n    });\n\n    return await UserRepository.save(newUser);\n  }\n\n  async getUserPreferences(userId: string){\n    return await this.Users.getPrefs(userId)\n  }\n\n  async sellerLogin(email: string, password: string) {\n    // Check if User is a Seller\n    const isSeller = await UserRepository.isSeller(email);\n    if (!isSeller) {\n      throw new Error('User is not a seller.');\n    }\n    const account = new sdk.Account(this.AppWriteClient)\n    const promise = account.createEmailPasswordSession(email, password)\n    promise.then((response: any) => {\n      console.log(response)\n    }\n    ).catch((error: any) => {\n      console.log(error)\n    })\n  }\n\n  async makeUserSeller(email: string) {\n    return await UserRepository.makeSeller(email);\n  }\n\n  async updateUserPreferences(id: string, preferences: UserPreferences) {\n    return await this.Users.updatePrefs(id, preferences)\n  }\n\n  async updateUserPassword(id: string, newPassword: string) {\n    return await this.Users.updatePassword(id, newPassword)\n  }\n\n  async updateUserEmail(id: string, email: string) {\n    return await this.Users.updateEmail(id, email)\n  }\n\n  async updateUserName(id: string, name: string) {\n    return await this.Users.updateName(id, name)\n  }\n\n  async getUserById(id: string) {\n    return await this.Users.get(id);\n  }\n\n  async getAllUsers() {\n    return await this.Users.list()\n  }\n\n  async removeUser(id: string) {\n    return await this.Users.deleteIdentity(id);\n  }\n}\n","import AppDataSource from '../../../infrastructure/db/database';\nimport { hashPassword } from '../../../api/middleware/password.middleware';\nimport { validateUserFields } from '../../../api/middleware/user.middleware';\nimport { Middleware } from '../../../api/decorators/middleware';\nimport { UserService } from '../../../infrastructure/services/user.service';\nimport { Request, Response } from 'express';\nimport { UserType } from '../../../types/user';\n\n\nclass UserController {\n  public static userService = new UserService();\n\n\n  @Middleware(validateUserFields)\n  @Middleware(hashPassword)\n  async createUser(req: Request, res: Response): Promise<void> {\n    try {\n      const { email, password, firstName, lastName, country, city, address, postalCode, phone, avatar }: UserType = req.body;\n      const user = await UserController.userService.createUser(email, password, firstName, lastName, country, city, address, postalCode, phone, avatar);\n      res.status(200).json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  } \n  async getAllUsers(_req: Request, res: Response): Promise<void> {\n    console.log(_req)\n    try {\n      const users = await UserController.userService.getAllUsers();\n      res.json(users);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  async sellerLogin(req: Request, res: Response): Promise<void> {\n    try {\n      const { email, password } = req.body;\n      const user = await UserController.userService.sellerLogin(email, password);\n      res.status(200).json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  }\n\n  async makeUserSeller(req: Request, res: Response): Promise<void> {\n    try {\n      const { email } = req.body;\n      const user = await UserController.userService.makeUserSeller(email);\n      res.status(200).json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  }\n}\n\nexport default UserController;\n","import express, { Router } from 'express';\nimport {SellerController} from '../../core/controllers/Sellers/SellerController';\nimport { validateUserFields, passwordValidations } from '../../api/middleware/user.middleware';\nconst router: Router = express.Router();\n\nconst sellerController = new SellerController();\n\nrouter.get('/', sellerController.getAllSellers);\nrouter.post('/add', sellerController.addSeller);\n\nexport default router;\n","import { Request, Response } from 'express';\nimport { plainToClass } from \"class-transformer\";\nimport { SellerService } from \"../../../infrastructure/services/seller.service\";\nimport { SellerDTO as Seller } from \"../../../infrastructure/dto/SellerDTO\";\n\n\nexport class SellerController{\n    static sellerService: SellerService = new SellerService();\n\n    public getAllSellers = async (req: Request, res: Response): Promise<void> => {\n        try {\n            const sellers = await SellerController.sellerService.fetchSellers();\n            res.json(sellers);\n        } catch (error: any) {\n            res.status(500).json({ message: error.message });\n        }\n    };\n\n    public addSeller = async (req: Request, res: Response): Promise<void> => {\n        try {\n            // Ensure request is valid\n            if (!req.body) {\n                res.status(400).json({ message: 'Request body is required' });\n                return;\n            }\n            // Ensure all required fields are present\n            const newSeller = plainToClass(Seller, req.body);\n            const seller = await SellerController.sellerService.createSeller(newSeller);\n            res.status(201).json(seller);\n        } catch (error: any) {\n            res.status(400).json({ message: error.message });\n        }\n    };\n\n    public getSellerById = async (req: Request, res: Response): Promise<void> => {\n        try {\n            const seller = await SellerController.sellerService.getSellerById(Number(req.params.id));\n            if (seller) {\n                res.json(seller);\n            } else {\n                res.status(404).json({ message: 'Seller not found' });\n            }\n        } catch (error: any) {\n            res.status(500).json({ message: error.message });\n        }\n    }\n\n    public getSellerProducts = async (req: Request, res: Response): Promise<void> => {\n        try {\n            const products = await SellerController.sellerService.getSellerProducts(Number(req.params.id));\n            if (products) {\n                res.json(products);\n            } else {\n                res.status(404).json({ message: 'Seller not found' });\n            }\n        } catch (error: any) {\n            res.status(500).json({ message: error.message });\n        }\n    }\n\n    public getSellerRevenues = async (req: Request, res: Response): Promise<void> => {\n        try {\n            const sellerID = Number(req.params.id);\n            const revenues = await SellerController.sellerService.getSellerRevenues(sellerID);\n            if (revenues) {\n                res.json(revenues);\n            } else {\n                res.status(404).json({ message: 'Seller not found' });\n            }\n        } catch (error: any) {\n            res.status(500).json({ message: error.message });\n        }\n    }\n\n    public getSellerOrders = async (req: Request, res: Response): Promise<void> => {\n        try {\n            const sellerID = Number(req.params.id);\n            const orders = await SellerController.sellerService.getSellerOrders(sellerID);\n            if (orders) {\n                res.json(orders);\n            } else {\n                res.status(404).json({ message: 'Seller not found' });\n            }\n        } catch (error: any) {\n            res.status(500).json({ message: error.message });\n        }\n    }\n\n    public updateSeller = async (req: Request, res: Response): Promise<void> => {\n        try {\n            const sellerId = Number(req.params.id);\n            const updatedSeller = await SellerController.sellerService.updateSeller(sellerId, req.body);\n            if (updatedSeller) {\n                res.json(updatedSeller);\n            } else {\n                res.status(404).json({ message: 'Seller not found' });\n            }\n        } catch (error: any) {\n            res.status(500).json({ message: error.message });\n        }\n    }\n\n    public deleteSeller = async (req: Request, res: Response): Promise<void> => {\n        try {\n            const result = await SellerController.sellerService.deleteSeller(req.body.id);\n            if (result) {\n                res.status(200).send(result);\n            } else {\n                res.status(404).json({ message: 'Seller not found' });\n            }\n        } catch (error: any) {\n            res.status(500).json({ message: error.message });\n        }\n    }\n\n    public getTrendingSellers = async (req: Request, res: Response): Promise<void> => {\n        try {\n            const trendingSellers = await SellerController.sellerService.getTrendingSellers();\n            if (trendingSellers) {\n                res.json(trendingSellers);\n            } else {\n                res.status(404).json({ message: 'No trending sellers found' });\n            }\n        } catch (error: any) {\n            res.status(500).json({ message: error.message });\n        }\n    }\n    public getTopSellers = async (req: Request, res: Response): Promise<void> => {\n        try {\n            const topSellers = await SellerController.sellerService.getTopSellers();\n            if (topSellers) {\n                res.json(topSellers);\n            } else {\n                res.status(404).json({ message: 'No top sellers found' });\n            }\n        } catch (error: any) {\n            res.status(500).json({ message: error.message });\n        }\n    }\n\n\n    public getTrendingProductsForSeller = async (req: Request, res: Response): Promise<void> => {\n        try {\n            const sellerID = Number(req.params.id);\n            const trendingProducts = await SellerController.sellerService.getTrendingProducts(sellerID);\n            if (trendingProducts) {\n                res.json(trendingProducts);\n            } else {\n                res.status(404).json({ message: 'No trending products found' });\n            }\n        } catch (error: any) {\n            res.status(500).json({ message: error.message });\n        }\n    }\n}","import { ProductDto } from \"./ProductDTO\";\n\nexport class SellerDTO {\n  seller_id: number;\n  email: string;\n  store_name: string;\n  store_description: string;\n  store_logo: string;\n  products: ProductDto[];\n}","import AppDataSource from '../db/database';\nimport { SellerDTO as Seller } from '../dto/SellerDTO';\nimport { plainToInstance } from 'class-transformer';\nimport { ProductDto as Product } from '../dto/ProductDTO';\n\nexport const SellerRepository = AppDataSource.getRepository(Seller).extend({\n    async createAndSave(sellerData: Partial<Seller>): Promise<Seller> {\n        const seller = this.create(sellerData);\n        return this.save(seller);\n    },\n\n    async getSellerProducts(sellerId: number): Promise<any> {\n        const Products = await this.createQueryBuilder('seller')\n            .leftJoinAndSelect('seller.products', 'product')\n            .where('seller.seller_id = :sellerId', { sellerId })\n            .getMany();\n        const ProductsDTO = Products.map((product) => {\n            return plainToInstance(Product, product);\n        });\n        return ProductsDTO;\n        \n    }\n\n    // async findSellerById(sellerId: number): Promise<Seller | undefined> {\n    //     return this.findOne({ where: { sellerId: sellerId } });\n    // }\n});\n","import { ProductCategory, ProductColors, ProductTags} from '../../utils/products.enums';\nexport class ProductDto {\n  product_id: string;\n  name: string;\n  description: string;\n  price: number;\n  color: {\n    primaryColor: ProductColors[];\n    secondaryColor: ProductColors[];\n  };\n  listed_size: string;\n  product_category: ProductCategory;\n  brand: string;\n  gender: string;\n  tags: ProductTags[];\n  imageURLS: string[];\n  seller_id: string; // Assuming you want to pass only the seller ID in the DTO\n  material?: string;\n  dimensions?: string;\n  interactions: { id: string }[]; // Assuming the DTO needs only the ID of the interactions\n}\n","import AppDataSource from '../../db/database';\nimport { ProductDto as Product } from '../../dto/ProductDTO';\nimport { create } from 'domain';\nimport { UpdateResult } from 'typeorm';\n\nexport const ProductRepository = AppDataSource.getRepository(Product).extend({\n  async findWithColors(productId: number): Promise<string> {\n    const productIdStr = String(productId);\n    // const product = this.findOne({ where: { id: productIdStr }, relations: ['colors'] });\n    return \"product\";\n  },\n  async createAndSave(productData: Partial<Product>): Promise<Product | null> {\n    const product = this.create(productData);\n    // Check uniqueness\n    const existingProduct = await AppDataSource\n      .createQueryBuilder()\n      .select('product')\n      .from(Product, 'product')\n      .where('product.name = :name', { name: product.name })\n      .andWhere('product.seller = :seller', { seller: product.seller_id });\n    if (existingProduct) {\n      return null;\n    }\n    return this.save(product);\n  },\n\n  async update(id: string, productData: Product): Promise<UpdateResult> {\n    const updatedProduct = AppDataSource.createQueryBuilder()\n      .update(Product)\n      .set(productData)\n      .where('id = :id', { id })\n      .execute();\n    return updatedProduct;\n  },\n\n  async findTrendingProducts(): Promise<Product[]> {\n    return await AppDataSource.createQueryBuilder().select('product')\n      .from(Product, 'product').orderBy('product.views', 'DESC').getMany();\n  },\n  \n  async findByTags(tag: string): Promise<Product[]> {\n    return await AppDataSource.createQueryBuilder().select('product')\n      .from(Product, 'product').where('product.tags = :tag', { tag }).getMany();\n  },\n\n  async filterProducts(filter: any): Promise<Product[]> {\n    const queryBuilder = AppDataSource.createQueryBuilder().select('product')\n    if (filter.upperPrice) {\n      queryBuilder.where('product.price < :price', { price: filter.upperPrice });\n      queryBuilder.andWhere('product.price > :price', { price: filter.lowerPrice ? filter.lowerPrice : 0 });\n    }\n    if (filter.category) {\n      queryBuilder.andWhere('product.product_category = :category', { category: filter.category });\n    }\n    if (filter.brand) {\n      queryBuilder.andWhere('product.brand = :brand', { brand: filter.brand });\n    }\n    if (filter.color) {\n      queryBuilder.andWhere('product.color = :color', { color: filter.color });\n    }\n    if (filter.size) {\n      queryBuilder.andWhere('product.listed_size = :size', { size: filter.size });\n    }\n    if (filter.condition) {\n      queryBuilder.andWhere('product.condition = :condition', { condition: filter.condition });\n    }\n    return queryBuilder.getMany();\n    \n  }\n});\n","import { SellerDTO as Seller } from '../dto/SellerDTO';\nimport { SellerRepository } from '../repositories/sellerRepository';\nimport { ProductRepository } from '../repositories/Products/ProductRepository';\nimport AppDataSource from '../db/database';\nimport { CreateSellerDto } from '../dto/CreateSellerDTO';\nimport { plainToClass, plainToInstance } from 'class-transformer';\nimport { ProductDto as Product } from '../dto/ProductDTO';\n\nexport class SellerService {\n\n    async createSeller(createSellerDto: Seller): Promise<Seller> {\n        const sellerData: Partial<Seller> = {\n            email: createSellerDto.email,\n            store_name: createSellerDto.store_name,\n            store_description: createSellerDto.store_description,\n            store_logo: createSellerDto.store_logo,\n        };\n        return await SellerRepository.save(sellerData)\n    }\n\n    async fetchSellers(): Promise<Seller[]> {\n        return await SellerRepository.find();\n    }\n\n    async getSellerById(sellerId: number): Promise<Seller | null> {\n        return await SellerRepository.findOneBy({ seller_id: sellerId });\n    }\n\n    async getSellerProducts(sellerId: number): Promise<any> {\n        return await SellerRepository.getSellerProducts(sellerId);\n    }\n\n    async updateSeller(sellerId: number, updatedSeller: Seller): Promise<Seller | null> {\n        const seller = await SellerRepository.findOneBy({ seller_id: sellerId });\n        AppDataSource.createQueryBuilder()\n            .update(Seller)\n            .set(updatedSeller)\n            .where('seller_id = :seller_id', { seller_id: sellerId })\n            .execute();\n        return null;\n    }\n\n    async deleteSeller(sellerId: number): Promise<boolean> {\n        const seller = await SellerRepository.findOneBy({ seller_id: sellerId });\n        if (seller) {\n            await AppDataSource.createQueryBuilder().delete().from(Seller).where('seller_id = :seller_id', { sellerId }).execute();\n        }\n        return false;\n    }\n\n    async getTrendingProducts(sellerID: number): Promise<Product[]> {\n        const trendingProducts = await ProductRepository\n            .createQueryBuilder('product')\n            .leftJoinAndSelect('product.interactions', 'interaction')\n            .where('interaction.interaction_date >= :startDate', { startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }) // last 7 days\n            .andWhere('product.sellerId = :sellerId', { sellerID }) // Filter by specific seller\n            .select('product.product_id', 'product_id')\n            .addSelect('product.name', 'name')\n            .addSelect('COUNT(interaction.interaction_id)', 'interaction_count')\n            .groupBy('product.product_id')\n            .orderBy('interaction_count', 'DESC')\n            .limit(10) // Limit to top 10 trending products\n            .getRawMany();\n        const productDTO = trendingProducts.map((product) => {\n            const instanceConversion = plainToInstance(Product, product);\n            return instanceConversion\n\n        });\n        return productDTO;\n    }\n\n    // TODO: Implement the following methods\n    async getSellerRevenues(sellerId: number): Promise<null> {\n        return null;\n    }\n\n    async getSellerOrders(sellerId: number): Promise<null> {\n        return null;\n    }\n\n    async getTopSellers(): Promise<null> {\n        return null;\n    }\n\n    async getTrendingSellers(): Promise<null> {\n        return null;\n    }\n\n\n\n}\n","import express, { Router } from 'express';\n// import { ProductController } from '../../api/controllers/product.controller';\nimport { ProductController } from '../../core/controllers/Products/ProductController';\nimport { validateProductFields } from '../../api/middleware/products.middleware';\n\nconst router: Router = express.Router();\nconst productController = new ProductController();\n\nrouter.get('/get', productController.fetchProducts);\nrouter.post('/add', productController.addProduct);\nrouter.get('/:id', productController.getProductById);\nrouter.delete('/delete', productController.deleteProduct);\nrouter.put('/:id', productController.updateProduct);\n\nexport default router;\n","import bcrypt from 'bcrypt';\nimport { plainToClass } from 'class-transformer';\nimport { ProductDto as Product } from '../dto/ProductDTO';\nimport { ProductFilters, ProductType } from '../../types/product';\nimport { ProductCategory, ProductTags } from '../../utils/products.enums';\nimport { ProductRepository } from '../repositories/Products/ProductRepository';\n\nexport class ProductService {\n\n  // Get Methods\n  async fetchProducts(): Promise<Product[]> {\n    // If the id is undefined, it will return all orders\n    return await ProductRepository.find();\n  }\n\n  async getTrendingProducts(): Promise<Product[]> {\n    // Current Products that have the most wishlist + likes + views\n    const trendingProducts = await ProductRepository.findTrendingProducts();\n    return trendingProducts;\n  }\n\n  async getProductsByCategory(category: string): Promise<Product[]> {\n    if (category in ProductCategory) {\n      throw new Error('Invalid category');\n    }\n    const categoryKey = category as keyof typeof ProductCategory;\n    const products = await ProductRepository.findBy({ product_category: ProductCategory[categoryKey] });\n    if (!products) {\n      return [];\n    }\n    return products;\n  }\n\n    async getProductsByStyle(tag: string): Promise<Product[]> {\n    if (tag in ProductCategory) {\n      throw new Error('Invalid category');\n    }\n    const tagKey = tag as keyof typeof ProductCategory;\n    const products = await ProductRepository.findByTags(tagKey);\n    if (!products) {\n      return [];\n    }\n    return products;\n    }\n  \n  async filterProducts(filter: ProductFilters): Promise<Product[]> {\n    const products = await ProductRepository.filterProducts(filter);\n    if (!products) {\n      return [];\n    }\n    return products;\n  }\n\n  async getProductById(id: string): Promise<Product | null> {\n    const product = await ProductRepository.findOneBy({ product_id: id });\n    if (!product) {\n      return null\n    }\n    return product;\n  } \n\n  // Post Methods\n  async createProduct(productData: ProductType): Promise<Product | null> {\n    productData.product_id = await this._genProductId(productData.seller.toString(), productData.name);\n    const newProduct = plainToClass(Product, productData);\n    return await ProductRepository.createAndSave(newProduct);\n  }\n\n  async updateProduct(id: string, productData: ProductType): Promise<boolean> {\n    const updatedProduct = plainToClass(Product, productData);\n    const UpdateResult = await ProductRepository.update(id, updatedProduct);\n    if (UpdateResult.affected === 0) {\n      return false\n    }\n    else {\n      return true;\n    }\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const product = await ProductRepository.findOneBy({ product_id: id });\n    if (!product) {\n      return false;\n    }\n    const deletedProduct = await ProductRepository.remove(product);\n    if (!deletedProduct) {\n      throw new Error('Failed to delete product');\n    }\n    return true;\n  }\n\n  // Private Methods\n  async _genProductId(sellerId: string, productName: string): Promise<string> {\n    return await bcrypt.hashSync(sellerId + productName.toLowerCase(), 10);\n  }\n\n  // _genProductUpdateInput(product: ProductType): any {\n  // }\n\n  // _genProductAddInput(product: ProductType): any {\n  //   if (product.imageUrls && product.imageUrls.length === 0) {\n  //     throw new Error('Product must have at least one image');\n  //   }\n\n  //   const colors = {\n  //     PrimaryColor: product.primaryColors,\n  //     SecondaryColor: product.secondaryColors,\n  //   };\n\n  //   const media = product.imageUrls.map((url) => {\n  //     return {\n  //       originalSource: url,\n  //       alt: product.name,\n  //       mediaContentType: 'IMAGE',\n  //     };\n  //   });\n\n  //   const ProductAddSchema = {\n  //     input: {\n  //       title: product.name,\n  //       descriptionHtml: product.description,\n  //       category: 'gid://shopify/TaxonomyCategory/aa-1-1-7-5',\n  //       tags: product.tags,\n  //       vendor: product.seller,\n  //       seo: {\n  //         title: product.name,\n  //         description: product.description,\n  //       },\n  //       productType: product.category,\n  //       metafields: [\n  //         {\n  //           namespace: 'custom',\n  //           key: 'condition',\n  //           value: product.condition,\n  //           type: 'single_line_text_field',\n  //         },\n  //         {\n  //           namespace: 'custom',\n  //           key: 'size',\n  //           value: product.size,\n  //           type: 'single_line_text_field'\n  //         },\n  //         {\n  //           namespace: 'custom',\n  //           key: 'material',\n  //           value: product.material.toString(),\n  //           type: 'single_line_text_field'\n  //         },\n  //         {\n  //           namespace: 'custom',\n  //           key: 'gender',\n  //           value: product.gender,\n  //           type: 'single_line_text_field',\n  //         },\n  //         {\n  //           namespace: 'custom',\n  //           key: 'brand',\n  //           value: product.brand,\n  //           type: 'single_line_text_field',\n  //         },\n  //         {\n  //           namespace: 'custom',\n  //           key: 'color',\n  //           value: JSON.stringify(colors),\n  //           type: 'json',\n  //         },\n  //       ],\n  //     },\n  //     media: media,\n  //   };\n\n  //   return ProductAddSchema;\n  // }\n}\n","export enum ProductCondition {\n  A = 'New',\n  B = 'Used',\n  C = 'Refurbished',\n  D = 'Damaged',\n}\nexport enum ProductGender {\n  Male = 'Male',\n  Female = 'Female',\n  Unisex = 'Unisex',\n}\nexport enum ProductCategory {\n  Shirt = 'Shirt',\n  Pants = 'Pants',\n  Dress = 'Dress',\n  Jacket = 'Jacket',\n  Coat = 'Coat',\n  Suit = 'Suit',\n  Blazer = 'Blazer',\n  Sweater = 'Sweater',\n  Cardigan = 'Cardigan',\n  Top = 'Top',\n  Blouse = 'Blouse',\n  Tshirt = 'Tshirt',\n  Tanktop = 'Tanktop',\n  Jumpsuit = 'Jumpsuit',\n  Skirts = 'Skirts',\n  Other = 'Other',\n}\n\nexport enum ProductSize {\n  XXS = 'XXS',\n  XS = 'XS',\n  S = 'S',\n  M = 'M',\n  L = 'L',\n  XL = 'XL',\n  XXL = 'XXL',\n  XXXL = 'XXXL',\n}\nexport enum ProductMaterial {\n  Cotton = 'Cotton',\n  Polyester = 'Polyester',\n  Silk = 'Silk',\n  Wool = 'Wool',\n  Leather = 'Leather',\n  Denim = 'Denim',\n  Linen = 'Linen',\n  Other = 'Other',\n}\n\nexport enum ProductColors {\n  Black = 'Black',\n  White = 'White',\n  Red = 'Red',\n  Blue = 'Blue',\n  Green = 'Green',\n  Yellow = 'Yellow',\n  Pink = 'Pink',\n  Purple = 'Purple',\n  Orange = 'Orange',\n  Brown = 'Brown',\n  Grey = 'Grey',\n  Beige = 'Beige',\n  Other = 'Other',\n}\nexport enum ProductTags {\n  Vintage00s = \"00's Vintage\",\n  Streetwear = 'Streetwear',\n  Casual = 'Casual',\n  Formal = 'Formal',\n  Sportswear = 'Sportswear',\n  Retro = 'Retro',\n  Modern = 'Modern',\n  Classic = 'Classic',\n  Trendy = 'Trendy',\n  Other = 'Other',\n}\n\nconst measurements = {\n    Shirt: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Sleeve Length', 'Fit'],\n    Pants: ['Waist', 'Hip', 'Rise', 'Inseam', 'Length', 'Leg Opening'],\n    Dress: ['Bust', 'Waist', 'Hip', 'Length', 'Sleeve Length', 'Fit'],\n    Skirt: ['Waist', 'Hip', 'Length', 'Fit'],\n    Jacket: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Coat: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Suit: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Blazer: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Sweater: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Cardigan: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Top: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Blouse: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Tshirt: ['Chest', 'Shoulder', 'Sleeve', 'Length', 'Fit'],\n    Tanktop: ['Chest', 'Shoulder', 'Length', 'Fit'],\n    Jumpsuit: ['Chest', 'Waist', 'Hip', 'Length', 'Fit'],\n}\n\n\n\nexport enum FitTypes {\n  Slim = 'Slim',\n  Regular = 'Regular',\n  Loose = 'Loose',\n  Oversized = 'Oversized',\n}","import { Request, Response } from 'express';\nimport { ProductService } from '../../../infrastructure/services/product.service';\n\nexport class ProductController {\n  static productService: ProductService = new ProductService();\n\n  public addProduct = async (req: Request, res: Response): Promise<void> => {\n    try {\n      // Ensure request is valid\n      if (!req.body) {\n        res.status(400).json({ message: 'Request body is required' });\n        return;\n      }\n      // Ensure all required fields are present\n      const product = await ProductController.productService.createProduct(req.body);\n      if (!product) {\n        res.status(400).json({ message: 'Product already exists' });\n        return;\n      }\n      res.status(201).json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  };\n\n  async fetchProducts(req: Request, res: Response): Promise<void> {\n    try {\n      const products = await ProductController.productService.fetchProducts();\n      res.status(200).json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  public getProductById = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const product = await ProductController.productService.getProductById(req.params.id);\n      if (product) {\n        res.json(product);\n      } else {\n        res.status(404).json({ message: 'Product not found' });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  };\n\n  public updateProduct = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const updatedProduct = await ProductController.productService.updateProduct(req.params.id, req.body);\n      if (updatedProduct) {\n        res.json(updatedProduct);\n      } else {\n        res.status(404).json({ message: 'Product not found' });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  };\n\n  public deleteProduct = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const result = await ProductController.productService.deleteProduct(req.body.id);\n      if (result) {\n        res.status(200).send(result);\n      } else {\n        res.status(404).json({ message: 'Product not found' });\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  };\n\n  // Current Products that have the most wishlist + likes + views\n  public getTrendingProducts = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const topProducts = await ProductController.productService.getTrendingProducts();\n      res.json(topProducts);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  public getProductsByStyle = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const products = await ProductController.productService.getProductsByStyle(req.params.style);\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  getProductsByCategory = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const products = await ProductController.productService.getProductsByCategory(req.params.category);\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n\n  public filterProducts = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const products = await ProductController.productService.filterProducts(req.body);\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  \n}\n"],"mappings":"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","names":["express","express","plainToClass","plainToInstance","plainToInstance","plainToClass","router","express","express","bcrypt","plainToClass","ProductCategory","plainToClass","bcrypt","router","express","router","express"]}