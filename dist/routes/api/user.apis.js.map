{"version":3,"sources":["../../../src/routes/api/user.apis.ts","../../../src/api/middleware/password.middleware.ts","../../../src/api/middleware/user.middleware.ts","../../../src/api/decorators/middleware.ts","../../../src/infrastructure/db/database.ts","../../../src/infrastructure/dto/UserDTO.ts","../../../src/infrastructure/repositories/UserRepository.ts","../../../src/infrastructure/services/user.service.ts","../../../src/core/controllers/Users/UserController.ts"],"sourcesContent":["import express, { Router } from 'express';\nimport UserController from '../../core/controllers/Users/UserController';\nimport { validateUserFields, passwordValidations } from '../../api/middleware/user.middleware';\nconst router: Router = express.Router();\n\nconst userController = new UserController();\n\nrouter.get('/', userController.getAllUsers);\nrouter.post('/register', passwordValidations, userController.createUser);\nrouter.post('/login', userController.sellerLogin);\nrouter.post('/make-seller', userController.makeUserSeller);\n// router.post('/updatePreferences', userController.updatePreferences)\n// router.post('/login', userController.loginUser)\n// router.put('/:id', userController.updateUser)\n// router.put('/change-password/:id', userController.changePassword)\n\nexport default router;\n","import { Request, Response, NextFunction } from 'express';\nimport bcrypt from 'bcrypt';\n\nexport const hashPassword = async (req: Request, res: Response, next: NextFunction) => {\n  const { password }: { password: string } = req.body;\n  const salt: string = await bcrypt.genSalt(10);\n  const hashedPassword: string = await bcrypt.hash(password, salt);\n  req.body.password = hashedPassword;\n  next();\n};\n\nconst comparePassword = async (hashedPassword: string, userPassword: string) => {\n  return new Promise<null>(async (resolve, reject) => {\n    const passwordResp: Error | boolean = await bcrypt.compare(userPassword, hashedPassword);\n\n    if (typeof passwordResp === 'boolean') {\n      reject('Error while comparing passwords.');\n      return;\n    } else if (passwordResp == false) {\n      reject(new Error('Invalid credentials.'));\n    } else {\n      resolve(null);\n    }\n  });\n};\n","import { body, validationResult, ValidationChain } from 'express-validator';\nimport express, { Request, Response, NextFunction } from 'express';\n\nconst emailValidations = (email: string) => {\n  return body('email')\n    .exists()\n    .withMessage('Email is required.')\n    .isEmail()\n    .withMessage('Email is not valid.')\n    .isLength({ max: 50 })\n    .withMessage('Email cannot be more than 50 characters long.');\n};\n\nconst usernameValidations = (username: string) => {\n  return body('username')\n    .exists()\n    .withMessage('Username is required.')\n    .isAlphanumeric()\n    .isLength({ min: 6 })\n    .withMessage('Username must be at least 3 characters long.')\n    .isLength({ max: 24 })\n    .withMessage('Username cannot be more than 50 characters long.');\n};\n\nconst firstNameValidations = (firstName: string) => {\n  return body('firstName')\n    .exists()\n    .withMessage('First name is required.')\n    .isLength({ min: 2 })\n    .withMessage('First name must be at least 2 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('First name cannot be more than 50 characters long.');\n};\n\nconst lastNameValidations = (lastName: string) => {\n  return body('lastName')\n    .exists()\n    .withMessage('Last name is required.')\n    .isLength({ min: 2 })\n    .withMessage('Last name must be at least 2 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Last name cannot be more than 50 characters long.');\n};\n\n// TODO: Add city validations\nconst cityValidations = (city: string) => {\n  return body('city')\n    .exists()\n    .withMessage('City is required.')\n    .isLength({ min: 2 })\n    .withMessage('City must be at least 2 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('City cannot be more than 50 characters long.');\n};\n\n// TODO: Add postal code validations\nconst postalCodeValidations = (postalCode: string) => {\n  return body('postalCode')\n    .exists()\n    .withMessage('Postal code is required.')\n    .isLength({ min: 6 })\n    .withMessage('Postal code must be at least 6 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Postal code cannot be more than 50 characters long.');\n};\n\n//TODO: Add address validations\nconst addressValidations = (address: string) => {\n  return body('address')\n    .exists()\n    .withMessage('Address is required.')\n    .isLength({ min: 6 })\n    .withMessage('Address must be at least 6 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Address cannot be more than 50 characters long.');\n};\n\n// TODO: Add phone validations\nconst phoneValidations = (phone: string) => {\n  return body('phone')\n    .exists()\n    .withMessage('Phone is required.')\n    .isLength({ min: 6 })\n    .withMessage('Phone must be at least 6 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Phone cannot be more than 50 characters long.');\n};\n\n// TODO: Add avatar validations\nconst avatarValidations = (avatar: string) => {\n  return body('avatar').exists().withMessage('Avatar is required.');\n};\n\nexport const passwordValidations = (password: string) => {\n  return body('password')\n    .exists()\n    .withMessage('Password is required.')\n    .isLength({ min: 8 })\n    .withMessage('Password must be at least 8 characters long.')\n    .isLength({ max: 50 })\n    .withMessage('Password cannot be more than 50 characters long.')\n    .matches(/\\d/)\n    .withMessage('Password must contain at least one number.')\n    .matches(/[^A-Za-z0-9]/)\n    .withMessage('Password must contain at least one special character.')\n    .matches(/[A-Z]/)\n    .withMessage('Password must contain at least one uppercase letter.')\n    .matches(/[a-z]/)\n    .withMessage('Password must contain at least one lowercase letter.');\n};\n\nexport const validateUserFields = async (req: Request, res: Response, next: NextFunction) => {\n  console.log('validating');\n\n  const validations: ValidationChain[] = [\n    //@ts-expect-error error1\n    emailValidations(),\n    //@ts-expect-error error1\n    usernameValidations(),\n    // passwordValidations(req.body.password),\n    // addressValidations(req.body.address),\n    // cityValidations(req.body.city),\n    // postalCodeValidations(req.body.postalCode)\n  ];\n\n  for (const validation of validations) {\n    const result = await validation.run(req);\n\n    if (!result.isEmpty()) break;\n  }\n\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return next();\n  }\n\n  res.status(500).json({ message: 'Validation failed', errors: errors.array()[0].msg });\n};\n","import { RequestHandler } from 'express';\n\nexport function Middleware(middleware: RequestHandler): MethodDecorator {\n  console.log('Middleware(): factory evaluated');\n  return function (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\n    const middlewares: RequestHandler[] = Reflect.getMetadata('middlewares', target, propertyKey) || [];\n    middlewares.push(middleware);\n    Reflect.defineMetadata('middlewares', middlewares, target, propertyKey);\n  };\n}\n\nfunction first() {\n  console.log('first(): factory evaluated');\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log('first(): called');\n  };\n}\n\nfunction second() {\n  console.log('second(): factory evaluated');\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log('second(): called');\n  };\n}\n\nexport { first, second };\n","import { DataSource } from 'typeorm';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst { PGHOST, PGDATABASE, PGPASSWORD, PGUSER, ENDPOINT_ID } = process.env;\nconst AppDataSource = new DataSource({\n  type: 'postgres',\n  host: PGHOST,\n  port: 5432,\n  username: PGUSER,\n  password: PGPASSWORD,\n  database: PGDATABASE,\n  ssl: true,\n  logging: true,\n  entities: [__dirname + '/../../core/entity/*.model.{ts, js, mjs}'],\n  // entities: [__dirname + '/core/entity/*.model.js'],\n  synchronize: true,\n  cache: false,\n});\n\nconsole.log('DATABASE CONNECTION: ', __dirname + 'core/entity/*.model.js');\n\n\nexport default AppDataSource;\n","export class UserDto {\n  user_id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  cart: string[];\n  country?: string;\n  city?: string;\n  postalCode?: string;\n  phone?: string;\n  resetToken?: string;\n  expiryToken?: Date;\n  avatar?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  orders: { id: string }[]; // Assuming the DTO only needs the order IDs\n  transactions: { id: string }[]; // Assuming the DTO only needs the transaction IDs\n  interactions: { id: string }[]; // Assuming the DTO only needs the interaction IDs\n    isSeller: boolean;\n    password: string;\n}\n","import AppDataSource from '../db/database';\nimport { UserDto as User } from '../dto/UserDTO';\n\nexport const UserRepository = AppDataSource.getRepository(User).extend({\n  findByName(firstName: string, lastName: string) {\n    return this.createQueryBuilder('user')\n      .where('user.firstName = :firstName', { firstName })\n      .andWhere('user.lastName = :lastName', { lastName })\n      .getMany();\n  },\n  findByEmail(email: string) {\n    return this.createQueryBuilder('user').where('user.email = :email', { email }).getOne();\n  },\n  findById(id: number) {\n    return this.createQueryBuilder('user').where('user.id = :id', { id }).getOne();\n  },\n  findByIdandRemove(id: number) {\n    return this.createQueryBuilder('user').delete().from(User).where('user.id = :id', { id }).execute();\n  },\n  isSeller(email: string) {\n    return this.createQueryBuilder('user').where('user.email = :email', { email }).andWhere('user.isSeller = true').getOne();\n  },\n  makeSeller(email: string) {\n    return this.createQueryBuilder('user').update(User).set({ isSeller: true }).where('user.email = :email', { email }).execute();\n  }\n});\n","import { UserPreferences } from '../../types/user';\nimport { UserRepository } from '../repositories/UserRepository';\nconst sdk = require('node-appwrite');\n\nexport class UserService {\n  private AppWriteClient: any;\n  private Users: any;\n\n\n  constructor() {\n    const { APPWRITE_ENDPOINT, APPWRITE_PROJECT_ID, APPWRITE_API_KEY } = process.env\n    this.AppWriteClient = new sdk.Client()\n    .setEndpoint(APPWRITE_ENDPOINT) // Your API Endpoint\n    .setProject(APPWRITE_PROJECT_ID) // Your project ID\n    .setKey(APPWRITE_API_KEY) // Your secret API key\n      .setSelfSigned() // Use only on dev mode with a self-signed SSL cert\n    this.Users = new sdk.Users(this.AppWriteClient)\n  }\n  async createUser(\n    email: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n    country: string,\n    city: string,\n    address: string,\n    postalCode: string,\n    phone: string,\n    avatar: string,\n  ) {\n    const existingUser = await UserRepository.findByEmail(email);\n    if (existingUser) {\n      throw new Error('User already exists with the provided email address.');\n    }\n    // const newAddress = AddressRepository.create({\n    //   country: Country.CANADA,\n    //   province: Provinces.ONTARIO,\n    //   city,\n    //   address,\n    //   postalCode,\n    //   phone,\n    // });\n    const newUser = UserRepository.create({\n      email,\n      password,\n      firstName,\n      lastName,\n      postalCode,\n      phone,\n      avatar,\n    });\n\n    return await UserRepository.save(newUser);\n  }\n\n  async getUserPreferences(userId: string){\n    return await this.Users.getPrefs(userId)\n  }\n\n  async sellerLogin(email: string, password: string) {\n    // Check if User is a Seller\n    const isSeller = await UserRepository.isSeller(email);\n    if (!isSeller) {\n      throw new Error('User is not a seller.');\n    }\n    const account = new sdk.Account(this.AppWriteClient)\n    const promise = account.createEmailPasswordSession(email, password)\n    promise.then((response: any) => {\n      console.log(response)\n    }\n    ).catch((error: any) => {\n      console.log(error)\n    })\n  }\n\n  async makeUserSeller(email: string) {\n    return await UserRepository.makeSeller(email);\n  }\n\n  async updateUserPreferences(id: string, preferences: UserPreferences) {\n    return await this.Users.updatePrefs(id, preferences)\n  }\n\n  async updateUserPassword(id: string, newPassword: string) {\n    return await this.Users.updatePassword(id, newPassword)\n  }\n\n  async updateUserEmail(id: string, email: string) {\n    return await this.Users.updateEmail(id, email)\n  }\n\n  async updateUserName(id: string, name: string) {\n    return await this.Users.updateName(id, name)\n  }\n\n  async getUserById(id: string) {\n    return await this.Users.get(id);\n  }\n\n  async getAllUsers() {\n    return await this.Users.list()\n  }\n\n  async removeUser(id: string) {\n    return await this.Users.deleteIdentity(id);\n  }\n}\n","import AppDataSource from '../../../infrastructure/db/database';\nimport { hashPassword } from '../../../api/middleware/password.middleware';\nimport { validateUserFields } from '../../../api/middleware/user.middleware';\nimport { Middleware } from '../../../api/decorators/middleware';\nimport { UserService } from '../../../infrastructure/services/user.service';\nimport { Request, Response } from 'express';\nimport { UserType } from '../../../types/user';\n\n\nclass UserController {\n  public static userService = new UserService();\n\n\n  @Middleware(validateUserFields)\n  @Middleware(hashPassword)\n  async createUser(req: Request, res: Response): Promise<void> {\n    try {\n      const { email, password, firstName, lastName, country, city, address, postalCode, phone, avatar }: UserType = req.body;\n      const user = await UserController.userService.createUser(email, password, firstName, lastName, country, city, address, postalCode, phone, avatar);\n      res.status(200).json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  } \n  async getAllUsers(_req: Request, res: Response): Promise<void> {\n    console.log(_req)\n    try {\n      const users = await UserController.userService.getAllUsers();\n      res.json(users);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  async sellerLogin(req: Request, res: Response): Promise<void> {\n    try {\n      const { email, password } = req.body;\n      const user = await UserController.userService.sellerLogin(email, password);\n      res.status(200).json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  }\n\n  async makeUserSeller(req: Request, res: Response): Promise<void> {\n    try {\n      const { email } = req.body;\n      const user = await UserController.userService.makeUserSeller(email);\n      res.status(200).json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  }\n}\n\nexport default UserController;\n"],"mappings":"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","names":["bcrypt","dotenv","express"]}