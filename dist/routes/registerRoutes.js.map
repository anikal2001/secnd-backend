{"version":3,"sources":["../../src/routes/registerRoutes.ts"],"sourcesContent":["import { Application as App, RequestHandler } from 'express';\nimport fs from 'fs';\n\ntype HttpMethod = 'get' | 'post' | 'put' | 'delete' | 'patch' | 'options' | 'head';\n\nexport function registerControllers(app: App, path: string) {\n  fs.readdirSync(path).forEach((file) => {\n    const filePath = `${path}/${file}`;\n    if (fs.lstatSync(filePath).isDirectory()) {\n      registerControllers(app, filePath);\n    } else if (filePath.endsWith('.controller.ts')) {\n      const controller = require(filePath);\n      const controllerInstance = new controller[Object.keys(controller)[0]]();\n      registerRoutes(app, controllerInstance);\n    }\n  });\n}\n\n// for one controller register.\n// if you want set controller manual\n// then you can use it\n// https://medium.com/@samir_rustamov/streamline-your-express-app-a-simple-guide-to-better-routing-and-middleware-with-typescript-24454c535720\nexport function registerController(app: App, controller: any) {\n  registerRoutes(app, new controller());\n}\n\nexport function registerRoutes(app: App, controllerInstance: any) {\n  Object.getOwnPropertyNames(Object.getPrototypeOf(controllerInstance)).forEach((methodName) => {\n    // Retrieve route handler, path, HTTP method, and middlewares from metadata\n    const routeHandler = controllerInstance[methodName];\n    const path: string = Reflect.getMetadata('route', controllerInstance, methodName);\n    const method: HttpMethod = Reflect.getMetadata('method', controllerInstance, methodName) as HttpMethod;\n\n    // get middlewares from Middeware decorators\n    const middlewares: RequestHandler[] = Reflect.getMetadata('middlewares', controllerInstance, methodName) || [];\n    // If the method is valid, register the route with middlewares and the handler\n    if (path && method) {\n      const isMethodValid = method in app && typeof app[method] === 'function';\n      if (isMethodValid) {\n        (app[method] as Function)(path, ...middlewares, routeHandler);\n      } else {\n        console.warn(`Unsupported method '${method}' for route ${path}`);\n      }\n    }\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAe;AAIR,SAAS,oBAAoB,KAAU,MAAc;AAC1D,YAAAA,QAAG,YAAY,IAAI,EAAE,QAAQ,CAAC,SAAS;AACrC,UAAM,WAAW,GAAG,IAAI,IAAI,IAAI;AAChC,QAAI,UAAAA,QAAG,UAAU,QAAQ,EAAE,YAAY,GAAG;AACxC,0BAAoB,KAAK,QAAQ;AAAA,IACnC,WAAW,SAAS,SAAS,gBAAgB,GAAG;AAC9C,YAAM,aAAa,QAAQ,QAAQ;AACnC,YAAM,qBAAqB,IAAI,WAAW,OAAO,KAAK,UAAU,EAAE,CAAC,CAAC,EAAE;AACtE,qBAAe,KAAK,kBAAkB;AAAA,IACxC;AAAA,EACF,CAAC;AACH;AAMO,SAAS,mBAAmB,KAAU,YAAiB;AAC5D,iBAAe,KAAK,IAAI,WAAW,CAAC;AACtC;AAEO,SAAS,eAAe,KAAU,oBAAyB;AAChE,SAAO,oBAAoB,OAAO,eAAe,kBAAkB,CAAC,EAAE,QAAQ,CAAC,eAAe;AAE5F,UAAM,eAAe,mBAAmB,UAAU;AAClD,UAAM,OAAe,QAAQ,YAAY,SAAS,oBAAoB,UAAU;AAChF,UAAM,SAAqB,QAAQ,YAAY,UAAU,oBAAoB,UAAU;AAGvF,UAAM,cAAgC,QAAQ,YAAY,eAAe,oBAAoB,UAAU,KAAK,CAAC;AAE7G,QAAI,QAAQ,QAAQ;AAClB,YAAM,gBAAgB,UAAU,OAAO,OAAO,IAAI,MAAM,MAAM;AAC9D,UAAI,eAAe;AACjB,QAAC,IAAI,MAAM,EAAe,MAAM,GAAG,aAAa,YAAY;AAAA,MAC9D,OAAO;AACL,gBAAQ,KAAK,uBAAuB,MAAM,eAAe,IAAI,EAAE;AAAA,MACjE;AAAA,IACF;AAAA,EACF,CAAC;AACH;","names":["fs"]}